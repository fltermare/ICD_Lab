Terminals unused in grammar

   DEF


State 44 conflicts: 1 shift/reduce, 7 reduce/reduce
State 60 conflicts: 20 reduce/reduce
State 62 conflicts: 5 shift/reduce
State 80 conflicts: 1 shift/reduce, 6 reduce/reduce
State 103 conflicts: 5 shift/reduce
State 109 conflicts: 1 shift/reduce, 6 reduce/reduce
State 112 conflicts: 1 shift/reduce, 6 reduce/reduce
State 134 conflicts: 1 shift/reduce
State 136 conflicts: 8 shift/reduce
State 164 conflicts: 8 shift/reduce
State 165 conflicts: 8 shift/reduce
State 166 conflicts: 8 shift/reduce
State 167 conflicts: 8 shift/reduce
State 168 conflicts: 8 shift/reduce
State 169 conflicts: 8 shift/reduce
State 170 conflicts: 8 shift/reduce
State 171 conflicts: 8 shift/reduce


Grammar

    0 $accept: program $end

    1 program: ID ';' programbody END ID

    2 programbody: var_d function compound_state

    3 var_d: VAR id_list ':' scalar_type ';' var_d
    4      | VAR id_list ':' literal_constant ';' var_d
    5      | %empty

    6 id_list: ID ',' id_list
    7        | ID

    8 scalar_type: INTEGER
    9            | REAL
   10            | STRING
   11            | BOOLEAN
   12            | ARRAY INT TO INT OF scalar_type

   13 literal_constant: INT
   14                 | OCT
   15                 | SCI
   16                 | FLOAT
   17                 | str
   18                 | FALSE
   19                 | TRUE

   20 function: func_d function
   21         | func_p function
   22         | %empty

   23 func_d: ID '(' func ')' ':' scalar_type ';' compound_state END ID

   24 func_p: ID '(' func ')' ';' compound_state END ID

   25 state: compound_state state
   26      | simple_state state
   27      | conditional_state state
   28      | while_state state
   29      | for_state state
   30      | return_state state
   31      | func_invocation ';' state
   32      | %empty

   33 func_invocation: ID '(' func ')'

   34 compound_state: BEG var_d state END

   35 simple_state: ID ASSIGN boolean_expr ';'
   36             | expr ASSIGN expr ';'
   37             | PRINT ID ';'
   38             | PRINT expr ';'
   39             | PRINT str ';'
   40             | READ ID ';'
   41             | READ expr ';'
   42             | READ str ';'

   43 conditional_state: IF boolean_expr THEN state END IF
   44                  | IF boolean_expr THEN state ELSE state END IF

   45 while_state: WHILE boolean_expr DO state END DO

   46 for_state: FOR ID ASSIGN INT TO INT DO state END DO

   47 return_state: RETURN boolean_expr ';'

   48 func: id_list ':' scalar_type ';' func
   49     | id_list ':' scalar_type
   50     | expr_f
   51     | %empty

   52 num: INT
   53    | OCT
   54    | SCI
   55    | FLOAT

   56 control: ADD
   57        | SUB
   58        | MUL
   59        | DIV
   60        | MOD

   61 expr: SUB expr
   62     | expr control expr
   63     | '(' expr ')'
   64     | num
   65     | ID
   66     | func_invocation
   67     | ID bracket
   68     | TRUE
   69     | FALSE

   70 bracket: '[' expr ']' bracket
   71        | %empty

   72 expr_f: expr ',' expr_f
   73       | expr

   74 boolean_expr: '(' boolean_expr ')'
   75             | boolean_expr GT boolean_expr
   76             | boolean_expr LT boolean_expr
   77             | boolean_expr EQ boolean_expr
   78             | boolean_expr GE boolean_expr
   79             | boolean_expr LE boolean_expr
   80             | boolean_expr NE boolean_expr
   81             | boolean_expr AND boolean_expr
   82             | boolean_expr OR boolean_expr
   83             | NOT boolean_expr
   84             | expr

   85 str: BS str_c BSSS

   86 str_c: BSS str_c
   87      | BSS


Terminals, with rules where they appear

$end (0) 0
'(' (40) 23 24 33 63 74
')' (41) 23 24 33 63 74
',' (44) 6 72
':' (58) 3 4 23 48 49
';' (59) 1 3 4 23 24 31 35 36 37 38 39 40 41 42 47 48
'[' (91) 70
']' (93) 70
error (256)
ADD (258) 56
SUB (259) 57 61
MUL (260) 58
DIV (261) 59
MOD (262) 60
ASSIGN (263) 35 36 46
GT (264) 75
GE (265) 78
NE (266) 80
LE (267) 79
LT (268) 76
EQ (269) 77
AND (270) 81
OR (271) 82
NOT (272) 83
ARRAY (273) 12
BEG (274) 34
BOOLEAN (275) 11
DEF (276)
DO (277) 45 46
ELSE (278) 44
END (279) 1 23 24 34 43 44 45 46
FALSE (280) 18 69
FOR (281) 46
INTEGER (282) 8
IF (283) 43 44
OF (284) 12
PRINT (285) 37 38 39
READ (286) 40 41 42
REAL (287) 9
THEN (288) 43 44
TO (289) 12 46
TRUE (290) 19 68
VAR (291) 3 4
WHILE (292) 45
OCT (293) 14 53
ID (294) 1 6 7 23 24 33 35 37 40 46 65 67
INT (295) 12 13 46 52
FLOAT (296) 16 55
SCI (297) 15 54
RETURN (298) 47
BS (299) 85
BSS (300) 86 87
BSSS (301) 85
STRING (302) 10


Nonterminals, with rules where they appear

$accept (55)
    on left: 0
program (56)
    on left: 1, on right: 0
programbody (57)
    on left: 2, on right: 1
var_d (58)
    on left: 3 4 5, on right: 2 3 4 34
id_list (59)
    on left: 6 7, on right: 3 4 6 48 49
scalar_type (60)
    on left: 8 9 10 11 12, on right: 3 12 23 48 49
literal_constant (61)
    on left: 13 14 15 16 17 18 19, on right: 4
function (62)
    on left: 20 21 22, on right: 2 20 21
func_d (63)
    on left: 23, on right: 20
func_p (64)
    on left: 24, on right: 21
state (65)
    on left: 25 26 27 28 29 30 31 32, on right: 25 26 27 28 29 30 31
    34 43 44 45 46
func_invocation (66)
    on left: 33, on right: 31 66
compound_state (67)
    on left: 34, on right: 2 23 24 25
simple_state (68)
    on left: 35 36 37 38 39 40 41 42, on right: 26
conditional_state (69)
    on left: 43 44, on right: 27
while_state (70)
    on left: 45, on right: 28
for_state (71)
    on left: 46, on right: 29
return_state (72)
    on left: 47, on right: 30
func (73)
    on left: 48 49 50 51, on right: 23 24 33 48
num (74)
    on left: 52 53 54 55, on right: 64
control (75)
    on left: 56 57 58 59 60, on right: 62
expr (76)
    on left: 61 62 63 64 65 66 67 68 69, on right: 36 38 41 61 62 63
    70 72 73 84
bracket (77)
    on left: 70 71, on right: 67 70
expr_f (78)
    on left: 72 73, on right: 50 72
boolean_expr (79)
    on left: 74 75 76 77 78 79 80 81 82 83 84, on right: 35 43 44 45
    47 74 75 76 77 78 79 80 81 82 83
str (80)
    on left: 85, on right: 17 39 42
str_c (81)
    on left: 86 87, on right: 85 86


State 0

    0 $accept: . program $end

    ID  shift, and go to state 1

    program  go to state 2


State 1

    1 program: ID . ';' programbody END ID

    ';'  shift, and go to state 3


State 2

    0 $accept: program . $end

    $end  shift, and go to state 4


State 3

    1 program: ID ';' . programbody END ID

    VAR  shift, and go to state 5

    $default  reduce using rule 5 (var_d)

    programbody  go to state 6
    var_d        go to state 7


State 4

    0 $accept: program $end .

    $default  accept


State 5

    3 var_d: VAR . id_list ':' scalar_type ';' var_d
    4      | VAR . id_list ':' literal_constant ';' var_d

    ID  shift, and go to state 8

    id_list  go to state 9


State 6

    1 program: ID ';' programbody . END ID

    END  shift, and go to state 10


State 7

    2 programbody: var_d . function compound_state

    ID  shift, and go to state 11

    $default  reduce using rule 22 (function)

    function  go to state 12
    func_d    go to state 13
    func_p    go to state 14


State 8

    6 id_list: ID . ',' id_list
    7        | ID .

    ','  shift, and go to state 15

    $default  reduce using rule 7 (id_list)


State 9

    3 var_d: VAR id_list . ':' scalar_type ';' var_d
    4      | VAR id_list . ':' literal_constant ';' var_d

    ':'  shift, and go to state 16


State 10

    1 program: ID ';' programbody END . ID

    ID  shift, and go to state 17


State 11

   23 func_d: ID . '(' func ')' ':' scalar_type ';' compound_state END ID
   24 func_p: ID . '(' func ')' ';' compound_state END ID

    '('  shift, and go to state 18


State 12

    2 programbody: var_d function . compound_state

    BEG  shift, and go to state 19

    compound_state  go to state 20


State 13

   20 function: func_d . function

    ID  shift, and go to state 11

    $default  reduce using rule 22 (function)

    function  go to state 21
    func_d    go to state 13
    func_p    go to state 14


State 14

   21 function: func_p . function

    ID  shift, and go to state 11

    $default  reduce using rule 22 (function)

    function  go to state 22
    func_d    go to state 13
    func_p    go to state 14


State 15

    6 id_list: ID ',' . id_list

    ID  shift, and go to state 8

    id_list  go to state 23


State 16

    3 var_d: VAR id_list ':' . scalar_type ';' var_d
    4      | VAR id_list ':' . literal_constant ';' var_d

    ARRAY    shift, and go to state 24
    BOOLEAN  shift, and go to state 25
    FALSE    shift, and go to state 26
    INTEGER  shift, and go to state 27
    REAL     shift, and go to state 28
    TRUE     shift, and go to state 29
    OCT      shift, and go to state 30
    INT      shift, and go to state 31
    FLOAT    shift, and go to state 32
    SCI      shift, and go to state 33
    BS       shift, and go to state 34
    STRING   shift, and go to state 35

    scalar_type       go to state 36
    literal_constant  go to state 37
    str               go to state 38


State 17

    1 program: ID ';' programbody END ID .

    $default  reduce using rule 1 (program)


State 18

   23 func_d: ID '(' . func ')' ':' scalar_type ';' compound_state END ID
   24 func_p: ID '(' . func ')' ';' compound_state END ID

    '('    shift, and go to state 39
    SUB    shift, and go to state 40
    FALSE  shift, and go to state 41
    TRUE   shift, and go to state 42
    OCT    shift, and go to state 43
    ID     shift, and go to state 44
    INT    shift, and go to state 45
    FLOAT  shift, and go to state 46
    SCI    shift, and go to state 47

    $default  reduce using rule 51 (func)

    id_list          go to state 48
    func_invocation  go to state 49
    func             go to state 50
    num              go to state 51
    expr             go to state 52
    expr_f           go to state 53


State 19

   34 compound_state: BEG . var_d state END

    VAR  shift, and go to state 5

    $default  reduce using rule 5 (var_d)

    var_d  go to state 54


State 20

    2 programbody: var_d function compound_state .

    $default  reduce using rule 2 (programbody)


State 21

   20 function: func_d function .

    $default  reduce using rule 20 (function)


State 22

   21 function: func_p function .

    $default  reduce using rule 21 (function)


State 23

    6 id_list: ID ',' id_list .

    $default  reduce using rule 6 (id_list)


State 24

   12 scalar_type: ARRAY . INT TO INT OF scalar_type

    INT  shift, and go to state 55


State 25

   11 scalar_type: BOOLEAN .

    $default  reduce using rule 11 (scalar_type)


State 26

   18 literal_constant: FALSE .

    $default  reduce using rule 18 (literal_constant)


State 27

    8 scalar_type: INTEGER .

    $default  reduce using rule 8 (scalar_type)


State 28

    9 scalar_type: REAL .

    $default  reduce using rule 9 (scalar_type)


State 29

   19 literal_constant: TRUE .

    $default  reduce using rule 19 (literal_constant)


State 30

   14 literal_constant: OCT .

    $default  reduce using rule 14 (literal_constant)


State 31

   13 literal_constant: INT .

    $default  reduce using rule 13 (literal_constant)


State 32

   16 literal_constant: FLOAT .

    $default  reduce using rule 16 (literal_constant)


State 33

   15 literal_constant: SCI .

    $default  reduce using rule 15 (literal_constant)


State 34

   85 str: BS . str_c BSSS

    BSS  shift, and go to state 56

    str_c  go to state 57


State 35

   10 scalar_type: STRING .

    $default  reduce using rule 10 (scalar_type)


State 36

    3 var_d: VAR id_list ':' scalar_type . ';' var_d

    ';'  shift, and go to state 58


State 37

    4 var_d: VAR id_list ':' literal_constant . ';' var_d

    ';'  shift, and go to state 59


State 38

   17 literal_constant: str .

    $default  reduce using rule 17 (literal_constant)


State 39

   63 expr: '(' . expr ')'

    '('    shift, and go to state 39
    SUB    shift, and go to state 40
    FALSE  shift, and go to state 41
    TRUE   shift, and go to state 42
    OCT    shift, and go to state 43
    ID     shift, and go to state 60
    INT    shift, and go to state 45
    FLOAT  shift, and go to state 46
    SCI    shift, and go to state 47

    func_invocation  go to state 49
    num              go to state 51
    expr             go to state 61


State 40

   61 expr: SUB . expr

    '('    shift, and go to state 39
    SUB    shift, and go to state 40
    FALSE  shift, and go to state 41
    TRUE   shift, and go to state 42
    OCT    shift, and go to state 43
    ID     shift, and go to state 60
    INT    shift, and go to state 45
    FLOAT  shift, and go to state 46
    SCI    shift, and go to state 47

    func_invocation  go to state 49
    num              go to state 51
    expr             go to state 62


State 41

   69 expr: FALSE .

    $default  reduce using rule 69 (expr)


State 42

   68 expr: TRUE .

    $default  reduce using rule 68 (expr)


State 43

   53 num: OCT .

    $default  reduce using rule 53 (num)


State 44

    6 id_list: ID . ',' id_list
    7        | ID .
   33 func_invocation: ID . '(' func ')'
   65 expr: ID .
   67     | ID . bracket

    ','  shift, and go to state 15
    '('  shift, and go to state 63
    '['  shift, and go to state 64

    ','       [reduce using rule 65 (expr)]
    ','       [reduce using rule 71 (bracket)]
    ':'       reduce using rule 7 (id_list)
    ')'       reduce using rule 65 (expr)
    ')'       [reduce using rule 71 (bracket)]
    ADD       reduce using rule 65 (expr)
    ADD       [reduce using rule 71 (bracket)]
    SUB       reduce using rule 65 (expr)
    SUB       [reduce using rule 71 (bracket)]
    MUL       reduce using rule 65 (expr)
    MUL       [reduce using rule 71 (bracket)]
    DIV       reduce using rule 65 (expr)
    DIV       [reduce using rule 71 (bracket)]
    MOD       reduce using rule 65 (expr)
    MOD       [reduce using rule 71 (bracket)]
    $default  reduce using rule 65 (expr)

    bracket  go to state 65


State 45

   52 num: INT .

    $default  reduce using rule 52 (num)


State 46

   55 num: FLOAT .

    $default  reduce using rule 55 (num)


State 47

   54 num: SCI .

    $default  reduce using rule 54 (num)


State 48

   48 func: id_list . ':' scalar_type ';' func
   49     | id_list . ':' scalar_type

    ':'  shift, and go to state 66


State 49

   66 expr: func_invocation .

    $default  reduce using rule 66 (expr)


State 50

   23 func_d: ID '(' func . ')' ':' scalar_type ';' compound_state END ID
   24 func_p: ID '(' func . ')' ';' compound_state END ID

    ')'  shift, and go to state 67


State 51

   64 expr: num .

    $default  reduce using rule 64 (expr)


State 52

   62 expr: expr . control expr
   72 expr_f: expr . ',' expr_f
   73       | expr .

    ','  shift, and go to state 68
    ADD  shift, and go to state 69
    SUB  shift, and go to state 70
    MUL  shift, and go to state 71
    DIV  shift, and go to state 72
    MOD  shift, and go to state 73

    $default  reduce using rule 73 (expr_f)

    control  go to state 74


State 53

   50 func: expr_f .

    $default  reduce using rule 50 (func)


State 54

   34 compound_state: BEG var_d . state END

    '('     shift, and go to state 39
    SUB     shift, and go to state 40
    BEG     shift, and go to state 19
    FALSE   shift, and go to state 41
    FOR     shift, and go to state 75
    IF      shift, and go to state 76
    PRINT   shift, and go to state 77
    READ    shift, and go to state 78
    TRUE    shift, and go to state 42
    WHILE   shift, and go to state 79
    OCT     shift, and go to state 43
    ID      shift, and go to state 80
    INT     shift, and go to state 45
    FLOAT   shift, and go to state 46
    SCI     shift, and go to state 47
    RETURN  shift, and go to state 81

    $default  reduce using rule 32 (state)

    state              go to state 82
    func_invocation    go to state 83
    compound_state     go to state 84
    simple_state       go to state 85
    conditional_state  go to state 86
    while_state        go to state 87
    for_state          go to state 88
    return_state       go to state 89
    num                go to state 51
    expr               go to state 90


State 55

   12 scalar_type: ARRAY INT . TO INT OF scalar_type

    TO  shift, and go to state 91


State 56

   86 str_c: BSS . str_c
   87      | BSS .

    BSS  shift, and go to state 56

    $default  reduce using rule 87 (str_c)

    str_c  go to state 92


State 57

   85 str: BS str_c . BSSS

    BSSS  shift, and go to state 93


State 58

    3 var_d: VAR id_list ':' scalar_type ';' . var_d

    VAR  shift, and go to state 5

    $default  reduce using rule 5 (var_d)

    var_d  go to state 94


State 59

    4 var_d: VAR id_list ':' literal_constant ';' . var_d

    VAR  shift, and go to state 5

    $default  reduce using rule 5 (var_d)

    var_d  go to state 95


State 60

   33 func_invocation: ID . '(' func ')'
   65 expr: ID .
   67     | ID . bracket

    '('  shift, and go to state 63
    '['  shift, and go to state 64

    ','       reduce using rule 65 (expr)
    ','       [reduce using rule 71 (bracket)]
    ';'       reduce using rule 65 (expr)
    ';'       [reduce using rule 71 (bracket)]
    ')'       reduce using rule 65 (expr)
    ')'       [reduce using rule 71 (bracket)]
    ']'       reduce using rule 65 (expr)
    ']'       [reduce using rule 71 (bracket)]
    ADD       reduce using rule 65 (expr)
    ADD       [reduce using rule 71 (bracket)]
    SUB       reduce using rule 65 (expr)
    SUB       [reduce using rule 71 (bracket)]
    MUL       reduce using rule 65 (expr)
    MUL       [reduce using rule 71 (bracket)]
    DIV       reduce using rule 65 (expr)
    DIV       [reduce using rule 71 (bracket)]
    MOD       reduce using rule 65 (expr)
    MOD       [reduce using rule 71 (bracket)]
    ASSIGN    reduce using rule 65 (expr)
    ASSIGN    [reduce using rule 71 (bracket)]
    GT        reduce using rule 65 (expr)
    GT        [reduce using rule 71 (bracket)]
    GE        reduce using rule 65 (expr)
    GE        [reduce using rule 71 (bracket)]
    NE        reduce using rule 65 (expr)
    NE        [reduce using rule 71 (bracket)]
    LE        reduce using rule 65 (expr)
    LE        [reduce using rule 71 (bracket)]
    LT        reduce using rule 65 (expr)
    LT        [reduce using rule 71 (bracket)]
    EQ        reduce using rule 65 (expr)
    EQ        [reduce using rule 71 (bracket)]
    AND       reduce using rule 65 (expr)
    AND       [reduce using rule 71 (bracket)]
    OR        reduce using rule 65 (expr)
    OR        [reduce using rule 71 (bracket)]
    DO        reduce using rule 65 (expr)
    DO        [reduce using rule 71 (bracket)]
    THEN      reduce using rule 65 (expr)
    THEN      [reduce using rule 71 (bracket)]
    $default  reduce using rule 65 (expr)

    bracket  go to state 65


State 61

   62 expr: expr . control expr
   63     | '(' expr . ')'

    ')'  shift, and go to state 96
    ADD  shift, and go to state 69
    SUB  shift, and go to state 70
    MUL  shift, and go to state 71
    DIV  shift, and go to state 72
    MOD  shift, and go to state 73

    control  go to state 74


State 62

   61 expr: SUB expr .
   62     | expr . control expr

    ADD  shift, and go to state 69
    SUB  shift, and go to state 70
    MUL  shift, and go to state 71
    DIV  shift, and go to state 72
    MOD  shift, and go to state 73

    ADD       [reduce using rule 61 (expr)]
    SUB       [reduce using rule 61 (expr)]
    MUL       [reduce using rule 61 (expr)]
    DIV       [reduce using rule 61 (expr)]
    MOD       [reduce using rule 61 (expr)]
    $default  reduce using rule 61 (expr)

    control  go to state 74


State 63

   33 func_invocation: ID '(' . func ')'

    '('    shift, and go to state 39
    SUB    shift, and go to state 40
    FALSE  shift, and go to state 41
    TRUE   shift, and go to state 42
    OCT    shift, and go to state 43
    ID     shift, and go to state 44
    INT    shift, and go to state 45
    FLOAT  shift, and go to state 46
    SCI    shift, and go to state 47

    $default  reduce using rule 51 (func)

    id_list          go to state 48
    func_invocation  go to state 49
    func             go to state 97
    num              go to state 51
    expr             go to state 52
    expr_f           go to state 53


State 64

   70 bracket: '[' . expr ']' bracket

    '('    shift, and go to state 39
    SUB    shift, and go to state 40
    FALSE  shift, and go to state 41
    TRUE   shift, and go to state 42
    OCT    shift, and go to state 43
    ID     shift, and go to state 60
    INT    shift, and go to state 45
    FLOAT  shift, and go to state 46
    SCI    shift, and go to state 47

    func_invocation  go to state 49
    num              go to state 51
    expr             go to state 98


State 65

   67 expr: ID bracket .

    $default  reduce using rule 67 (expr)


State 66

   48 func: id_list ':' . scalar_type ';' func
   49     | id_list ':' . scalar_type

    ARRAY    shift, and go to state 24
    BOOLEAN  shift, and go to state 25
    INTEGER  shift, and go to state 27
    REAL     shift, and go to state 28
    STRING   shift, and go to state 35

    scalar_type  go to state 99


State 67

   23 func_d: ID '(' func ')' . ':' scalar_type ';' compound_state END ID
   24 func_p: ID '(' func ')' . ';' compound_state END ID

    ';'  shift, and go to state 100
    ':'  shift, and go to state 101


State 68

   72 expr_f: expr ',' . expr_f

    '('    shift, and go to state 39
    SUB    shift, and go to state 40
    FALSE  shift, and go to state 41
    TRUE   shift, and go to state 42
    OCT    shift, and go to state 43
    ID     shift, and go to state 60
    INT    shift, and go to state 45
    FLOAT  shift, and go to state 46
    SCI    shift, and go to state 47

    func_invocation  go to state 49
    num              go to state 51
    expr             go to state 52
    expr_f           go to state 102


State 69

   56 control: ADD .

    $default  reduce using rule 56 (control)


State 70

   57 control: SUB .

    $default  reduce using rule 57 (control)


State 71

   58 control: MUL .

    $default  reduce using rule 58 (control)


State 72

   59 control: DIV .

    $default  reduce using rule 59 (control)


State 73

   60 control: MOD .

    $default  reduce using rule 60 (control)


State 74

   62 expr: expr control . expr

    '('    shift, and go to state 39
    SUB    shift, and go to state 40
    FALSE  shift, and go to state 41
    TRUE   shift, and go to state 42
    OCT    shift, and go to state 43
    ID     shift, and go to state 60
    INT    shift, and go to state 45
    FLOAT  shift, and go to state 46
    SCI    shift, and go to state 47

    func_invocation  go to state 49
    num              go to state 51
    expr             go to state 103


State 75

   46 for_state: FOR . ID ASSIGN INT TO INT DO state END DO

    ID  shift, and go to state 104


State 76

   43 conditional_state: IF . boolean_expr THEN state END IF
   44                  | IF . boolean_expr THEN state ELSE state END IF

    '('    shift, and go to state 105
    SUB    shift, and go to state 40
    NOT    shift, and go to state 106
    FALSE  shift, and go to state 41
    TRUE   shift, and go to state 42
    OCT    shift, and go to state 43
    ID     shift, and go to state 60
    INT    shift, and go to state 45
    FLOAT  shift, and go to state 46
    SCI    shift, and go to state 47

    func_invocation  go to state 49
    num              go to state 51
    expr             go to state 107
    boolean_expr     go to state 108


State 77

   37 simple_state: PRINT . ID ';'
   38             | PRINT . expr ';'
   39             | PRINT . str ';'

    '('    shift, and go to state 39
    SUB    shift, and go to state 40
    FALSE  shift, and go to state 41
    TRUE   shift, and go to state 42
    OCT    shift, and go to state 43
    ID     shift, and go to state 109
    INT    shift, and go to state 45
    FLOAT  shift, and go to state 46
    SCI    shift, and go to state 47
    BS     shift, and go to state 34

    func_invocation  go to state 49
    num              go to state 51
    expr             go to state 110
    str              go to state 111


State 78

   40 simple_state: READ . ID ';'
   41             | READ . expr ';'
   42             | READ . str ';'

    '('    shift, and go to state 39
    SUB    shift, and go to state 40
    FALSE  shift, and go to state 41
    TRUE   shift, and go to state 42
    OCT    shift, and go to state 43
    ID     shift, and go to state 112
    INT    shift, and go to state 45
    FLOAT  shift, and go to state 46
    SCI    shift, and go to state 47
    BS     shift, and go to state 34

    func_invocation  go to state 49
    num              go to state 51
    expr             go to state 113
    str              go to state 114


State 79

   45 while_state: WHILE . boolean_expr DO state END DO

    '('    shift, and go to state 105
    SUB    shift, and go to state 40
    NOT    shift, and go to state 106
    FALSE  shift, and go to state 41
    TRUE   shift, and go to state 42
    OCT    shift, and go to state 43
    ID     shift, and go to state 60
    INT    shift, and go to state 45
    FLOAT  shift, and go to state 46
    SCI    shift, and go to state 47

    func_invocation  go to state 49
    num              go to state 51
    expr             go to state 107
    boolean_expr     go to state 115


State 80

   33 func_invocation: ID . '(' func ')'
   35 simple_state: ID . ASSIGN boolean_expr ';'
   65 expr: ID .
   67     | ID . bracket

    '('     shift, and go to state 63
    '['     shift, and go to state 64
    ASSIGN  shift, and go to state 116

    ADD       reduce using rule 65 (expr)
    ADD       [reduce using rule 71 (bracket)]
    SUB       reduce using rule 65 (expr)
    SUB       [reduce using rule 71 (bracket)]
    MUL       reduce using rule 65 (expr)
    MUL       [reduce using rule 71 (bracket)]
    DIV       reduce using rule 65 (expr)
    DIV       [reduce using rule 71 (bracket)]
    MOD       reduce using rule 65 (expr)
    MOD       [reduce using rule 71 (bracket)]
    ASSIGN    [reduce using rule 65 (expr)]
    ASSIGN    [reduce using rule 71 (bracket)]
    $default  reduce using rule 65 (expr)

    bracket  go to state 65


State 81

   47 return_state: RETURN . boolean_expr ';'

    '('    shift, and go to state 105
    SUB    shift, and go to state 40
    NOT    shift, and go to state 106
    FALSE  shift, and go to state 41
    TRUE   shift, and go to state 42
    OCT    shift, and go to state 43
    ID     shift, and go to state 60
    INT    shift, and go to state 45
    FLOAT  shift, and go to state 46
    SCI    shift, and go to state 47

    func_invocation  go to state 49
    num              go to state 51
    expr             go to state 107
    boolean_expr     go to state 117


State 82

   34 compound_state: BEG var_d state . END

    END  shift, and go to state 118


State 83

   31 state: func_invocation . ';' state
   66 expr: func_invocation .

    ';'  shift, and go to state 119

    $default  reduce using rule 66 (expr)


State 84

   25 state: compound_state . state

    '('     shift, and go to state 39
    SUB     shift, and go to state 40
    BEG     shift, and go to state 19
    FALSE   shift, and go to state 41
    FOR     shift, and go to state 75
    IF      shift, and go to state 76
    PRINT   shift, and go to state 77
    READ    shift, and go to state 78
    TRUE    shift, and go to state 42
    WHILE   shift, and go to state 79
    OCT     shift, and go to state 43
    ID      shift, and go to state 80
    INT     shift, and go to state 45
    FLOAT   shift, and go to state 46
    SCI     shift, and go to state 47
    RETURN  shift, and go to state 81

    $default  reduce using rule 32 (state)

    state              go to state 120
    func_invocation    go to state 83
    compound_state     go to state 84
    simple_state       go to state 85
    conditional_state  go to state 86
    while_state        go to state 87
    for_state          go to state 88
    return_state       go to state 89
    num                go to state 51
    expr               go to state 90


State 85

   26 state: simple_state . state

    '('     shift, and go to state 39
    SUB     shift, and go to state 40
    BEG     shift, and go to state 19
    FALSE   shift, and go to state 41
    FOR     shift, and go to state 75
    IF      shift, and go to state 76
    PRINT   shift, and go to state 77
    READ    shift, and go to state 78
    TRUE    shift, and go to state 42
    WHILE   shift, and go to state 79
    OCT     shift, and go to state 43
    ID      shift, and go to state 80
    INT     shift, and go to state 45
    FLOAT   shift, and go to state 46
    SCI     shift, and go to state 47
    RETURN  shift, and go to state 81

    $default  reduce using rule 32 (state)

    state              go to state 121
    func_invocation    go to state 83
    compound_state     go to state 84
    simple_state       go to state 85
    conditional_state  go to state 86
    while_state        go to state 87
    for_state          go to state 88
    return_state       go to state 89
    num                go to state 51
    expr               go to state 90


State 86

   27 state: conditional_state . state

    '('     shift, and go to state 39
    SUB     shift, and go to state 40
    BEG     shift, and go to state 19
    FALSE   shift, and go to state 41
    FOR     shift, and go to state 75
    IF      shift, and go to state 76
    PRINT   shift, and go to state 77
    READ    shift, and go to state 78
    TRUE    shift, and go to state 42
    WHILE   shift, and go to state 79
    OCT     shift, and go to state 43
    ID      shift, and go to state 80
    INT     shift, and go to state 45
    FLOAT   shift, and go to state 46
    SCI     shift, and go to state 47
    RETURN  shift, and go to state 81

    $default  reduce using rule 32 (state)

    state              go to state 122
    func_invocation    go to state 83
    compound_state     go to state 84
    simple_state       go to state 85
    conditional_state  go to state 86
    while_state        go to state 87
    for_state          go to state 88
    return_state       go to state 89
    num                go to state 51
    expr               go to state 90


State 87

   28 state: while_state . state

    '('     shift, and go to state 39
    SUB     shift, and go to state 40
    BEG     shift, and go to state 19
    FALSE   shift, and go to state 41
    FOR     shift, and go to state 75
    IF      shift, and go to state 76
    PRINT   shift, and go to state 77
    READ    shift, and go to state 78
    TRUE    shift, and go to state 42
    WHILE   shift, and go to state 79
    OCT     shift, and go to state 43
    ID      shift, and go to state 80
    INT     shift, and go to state 45
    FLOAT   shift, and go to state 46
    SCI     shift, and go to state 47
    RETURN  shift, and go to state 81

    $default  reduce using rule 32 (state)

    state              go to state 123
    func_invocation    go to state 83
    compound_state     go to state 84
    simple_state       go to state 85
    conditional_state  go to state 86
    while_state        go to state 87
    for_state          go to state 88
    return_state       go to state 89
    num                go to state 51
    expr               go to state 90


State 88

   29 state: for_state . state

    '('     shift, and go to state 39
    SUB     shift, and go to state 40
    BEG     shift, and go to state 19
    FALSE   shift, and go to state 41
    FOR     shift, and go to state 75
    IF      shift, and go to state 76
    PRINT   shift, and go to state 77
    READ    shift, and go to state 78
    TRUE    shift, and go to state 42
    WHILE   shift, and go to state 79
    OCT     shift, and go to state 43
    ID      shift, and go to state 80
    INT     shift, and go to state 45
    FLOAT   shift, and go to state 46
    SCI     shift, and go to state 47
    RETURN  shift, and go to state 81

    $default  reduce using rule 32 (state)

    state              go to state 124
    func_invocation    go to state 83
    compound_state     go to state 84
    simple_state       go to state 85
    conditional_state  go to state 86
    while_state        go to state 87
    for_state          go to state 88
    return_state       go to state 89
    num                go to state 51
    expr               go to state 90


State 89

   30 state: return_state . state

    '('     shift, and go to state 39
    SUB     shift, and go to state 40
    BEG     shift, and go to state 19
    FALSE   shift, and go to state 41
    FOR     shift, and go to state 75
    IF      shift, and go to state 76
    PRINT   shift, and go to state 77
    READ    shift, and go to state 78
    TRUE    shift, and go to state 42
    WHILE   shift, and go to state 79
    OCT     shift, and go to state 43
    ID      shift, and go to state 80
    INT     shift, and go to state 45
    FLOAT   shift, and go to state 46
    SCI     shift, and go to state 47
    RETURN  shift, and go to state 81

    $default  reduce using rule 32 (state)

    state              go to state 125
    func_invocation    go to state 83
    compound_state     go to state 84
    simple_state       go to state 85
    conditional_state  go to state 86
    while_state        go to state 87
    for_state          go to state 88
    return_state       go to state 89
    num                go to state 51
    expr               go to state 90


State 90

   36 simple_state: expr . ASSIGN expr ';'
   62 expr: expr . control expr

    ADD     shift, and go to state 69
    SUB     shift, and go to state 70
    MUL     shift, and go to state 71
    DIV     shift, and go to state 72
    MOD     shift, and go to state 73
    ASSIGN  shift, and go to state 126

    control  go to state 74


State 91

   12 scalar_type: ARRAY INT TO . INT OF scalar_type

    INT  shift, and go to state 127


State 92

   86 str_c: BSS str_c .

    $default  reduce using rule 86 (str_c)


State 93

   85 str: BS str_c BSSS .

    $default  reduce using rule 85 (str)


State 94

    3 var_d: VAR id_list ':' scalar_type ';' var_d .

    $default  reduce using rule 3 (var_d)


State 95

    4 var_d: VAR id_list ':' literal_constant ';' var_d .

    $default  reduce using rule 4 (var_d)


State 96

   63 expr: '(' expr ')' .

    $default  reduce using rule 63 (expr)


State 97

   33 func_invocation: ID '(' func . ')'

    ')'  shift, and go to state 128


State 98

   62 expr: expr . control expr
   70 bracket: '[' expr . ']' bracket

    ']'  shift, and go to state 129
    ADD  shift, and go to state 69
    SUB  shift, and go to state 70
    MUL  shift, and go to state 71
    DIV  shift, and go to state 72
    MOD  shift, and go to state 73

    control  go to state 74


State 99

   48 func: id_list ':' scalar_type . ';' func
   49     | id_list ':' scalar_type .

    ';'  shift, and go to state 130

    $default  reduce using rule 49 (func)


State 100

   24 func_p: ID '(' func ')' ';' . compound_state END ID

    BEG  shift, and go to state 19

    compound_state  go to state 131


State 101

   23 func_d: ID '(' func ')' ':' . scalar_type ';' compound_state END ID

    ARRAY    shift, and go to state 24
    BOOLEAN  shift, and go to state 25
    INTEGER  shift, and go to state 27
    REAL     shift, and go to state 28
    STRING   shift, and go to state 35

    scalar_type  go to state 132


State 102

   72 expr_f: expr ',' expr_f .

    $default  reduce using rule 72 (expr_f)


State 103

   62 expr: expr . control expr
   62     | expr control expr .

    ADD  shift, and go to state 69
    SUB  shift, and go to state 70
    MUL  shift, and go to state 71
    DIV  shift, and go to state 72
    MOD  shift, and go to state 73

    ADD       [reduce using rule 62 (expr)]
    SUB       [reduce using rule 62 (expr)]
    MUL       [reduce using rule 62 (expr)]
    DIV       [reduce using rule 62 (expr)]
    MOD       [reduce using rule 62 (expr)]
    $default  reduce using rule 62 (expr)

    control  go to state 74


State 104

   46 for_state: FOR ID . ASSIGN INT TO INT DO state END DO

    ASSIGN  shift, and go to state 133


State 105

   63 expr: '(' . expr ')'
   74 boolean_expr: '(' . boolean_expr ')'

    '('    shift, and go to state 105
    SUB    shift, and go to state 40
    NOT    shift, and go to state 106
    FALSE  shift, and go to state 41
    TRUE   shift, and go to state 42
    OCT    shift, and go to state 43
    ID     shift, and go to state 60
    INT    shift, and go to state 45
    FLOAT  shift, and go to state 46
    SCI    shift, and go to state 47

    func_invocation  go to state 49
    num              go to state 51
    expr             go to state 134
    boolean_expr     go to state 135


State 106

   83 boolean_expr: NOT . boolean_expr

    '('    shift, and go to state 105
    SUB    shift, and go to state 40
    NOT    shift, and go to state 106
    FALSE  shift, and go to state 41
    TRUE   shift, and go to state 42
    OCT    shift, and go to state 43
    ID     shift, and go to state 60
    INT    shift, and go to state 45
    FLOAT  shift, and go to state 46
    SCI    shift, and go to state 47

    func_invocation  go to state 49
    num              go to state 51
    expr             go to state 107
    boolean_expr     go to state 136


State 107

   62 expr: expr . control expr
   84 boolean_expr: expr .

    ADD  shift, and go to state 69
    SUB  shift, and go to state 70
    MUL  shift, and go to state 71
    DIV  shift, and go to state 72
    MOD  shift, and go to state 73

    $default  reduce using rule 84 (boolean_expr)

    control  go to state 74


State 108

   43 conditional_state: IF boolean_expr . THEN state END IF
   44                  | IF boolean_expr . THEN state ELSE state END IF
   75 boolean_expr: boolean_expr . GT boolean_expr
   76             | boolean_expr . LT boolean_expr
   77             | boolean_expr . EQ boolean_expr
   78             | boolean_expr . GE boolean_expr
   79             | boolean_expr . LE boolean_expr
   80             | boolean_expr . NE boolean_expr
   81             | boolean_expr . AND boolean_expr
   82             | boolean_expr . OR boolean_expr

    GT    shift, and go to state 137
    GE    shift, and go to state 138
    NE    shift, and go to state 139
    LE    shift, and go to state 140
    LT    shift, and go to state 141
    EQ    shift, and go to state 142
    AND   shift, and go to state 143
    OR    shift, and go to state 144
    THEN  shift, and go to state 145


State 109

   33 func_invocation: ID . '(' func ')'
   37 simple_state: PRINT ID . ';'
   65 expr: ID .
   67     | ID . bracket

    ';'  shift, and go to state 146
    '('  shift, and go to state 63
    '['  shift, and go to state 64

    ';'       [reduce using rule 65 (expr)]
    ';'       [reduce using rule 71 (bracket)]
    ADD       reduce using rule 65 (expr)
    ADD       [reduce using rule 71 (bracket)]
    SUB       reduce using rule 65 (expr)
    SUB       [reduce using rule 71 (bracket)]
    MUL       reduce using rule 65 (expr)
    MUL       [reduce using rule 71 (bracket)]
    DIV       reduce using rule 65 (expr)
    DIV       [reduce using rule 71 (bracket)]
    MOD       reduce using rule 65 (expr)
    MOD       [reduce using rule 71 (bracket)]
    $default  reduce using rule 65 (expr)

    bracket  go to state 65


State 110

   38 simple_state: PRINT expr . ';'
   62 expr: expr . control expr

    ';'  shift, and go to state 147
    ADD  shift, and go to state 69
    SUB  shift, and go to state 70
    MUL  shift, and go to state 71
    DIV  shift, and go to state 72
    MOD  shift, and go to state 73

    control  go to state 74


State 111

   39 simple_state: PRINT str . ';'

    ';'  shift, and go to state 148


State 112

   33 func_invocation: ID . '(' func ')'
   40 simple_state: READ ID . ';'
   65 expr: ID .
   67     | ID . bracket

    ';'  shift, and go to state 149
    '('  shift, and go to state 63
    '['  shift, and go to state 64

    ';'       [reduce using rule 65 (expr)]
    ';'       [reduce using rule 71 (bracket)]
    ADD       reduce using rule 65 (expr)
    ADD       [reduce using rule 71 (bracket)]
    SUB       reduce using rule 65 (expr)
    SUB       [reduce using rule 71 (bracket)]
    MUL       reduce using rule 65 (expr)
    MUL       [reduce using rule 71 (bracket)]
    DIV       reduce using rule 65 (expr)
    DIV       [reduce using rule 71 (bracket)]
    MOD       reduce using rule 65 (expr)
    MOD       [reduce using rule 71 (bracket)]
    $default  reduce using rule 65 (expr)

    bracket  go to state 65


State 113

   41 simple_state: READ expr . ';'
   62 expr: expr . control expr

    ';'  shift, and go to state 150
    ADD  shift, and go to state 69
    SUB  shift, and go to state 70
    MUL  shift, and go to state 71
    DIV  shift, and go to state 72
    MOD  shift, and go to state 73

    control  go to state 74


State 114

   42 simple_state: READ str . ';'

    ';'  shift, and go to state 151


State 115

   45 while_state: WHILE boolean_expr . DO state END DO
   75 boolean_expr: boolean_expr . GT boolean_expr
   76             | boolean_expr . LT boolean_expr
   77             | boolean_expr . EQ boolean_expr
   78             | boolean_expr . GE boolean_expr
   79             | boolean_expr . LE boolean_expr
   80             | boolean_expr . NE boolean_expr
   81             | boolean_expr . AND boolean_expr
   82             | boolean_expr . OR boolean_expr

    GT   shift, and go to state 137
    GE   shift, and go to state 138
    NE   shift, and go to state 139
    LE   shift, and go to state 140
    LT   shift, and go to state 141
    EQ   shift, and go to state 142
    AND  shift, and go to state 143
    OR   shift, and go to state 144
    DO   shift, and go to state 152


State 116

   35 simple_state: ID ASSIGN . boolean_expr ';'

    '('    shift, and go to state 105
    SUB    shift, and go to state 40
    NOT    shift, and go to state 106
    FALSE  shift, and go to state 41
    TRUE   shift, and go to state 42
    OCT    shift, and go to state 43
    ID     shift, and go to state 60
    INT    shift, and go to state 45
    FLOAT  shift, and go to state 46
    SCI    shift, and go to state 47

    func_invocation  go to state 49
    num              go to state 51
    expr             go to state 107
    boolean_expr     go to state 153


State 117

   47 return_state: RETURN boolean_expr . ';'
   75 boolean_expr: boolean_expr . GT boolean_expr
   76             | boolean_expr . LT boolean_expr
   77             | boolean_expr . EQ boolean_expr
   78             | boolean_expr . GE boolean_expr
   79             | boolean_expr . LE boolean_expr
   80             | boolean_expr . NE boolean_expr
   81             | boolean_expr . AND boolean_expr
   82             | boolean_expr . OR boolean_expr

    ';'  shift, and go to state 154
    GT   shift, and go to state 137
    GE   shift, and go to state 138
    NE   shift, and go to state 139
    LE   shift, and go to state 140
    LT   shift, and go to state 141
    EQ   shift, and go to state 142
    AND  shift, and go to state 143
    OR   shift, and go to state 144


State 118

   34 compound_state: BEG var_d state END .

    $default  reduce using rule 34 (compound_state)


State 119

   31 state: func_invocation ';' . state

    '('     shift, and go to state 39
    SUB     shift, and go to state 40
    BEG     shift, and go to state 19
    FALSE   shift, and go to state 41
    FOR     shift, and go to state 75
    IF      shift, and go to state 76
    PRINT   shift, and go to state 77
    READ    shift, and go to state 78
    TRUE    shift, and go to state 42
    WHILE   shift, and go to state 79
    OCT     shift, and go to state 43
    ID      shift, and go to state 80
    INT     shift, and go to state 45
    FLOAT   shift, and go to state 46
    SCI     shift, and go to state 47
    RETURN  shift, and go to state 81

    $default  reduce using rule 32 (state)

    state              go to state 155
    func_invocation    go to state 83
    compound_state     go to state 84
    simple_state       go to state 85
    conditional_state  go to state 86
    while_state        go to state 87
    for_state          go to state 88
    return_state       go to state 89
    num                go to state 51
    expr               go to state 90


State 120

   25 state: compound_state state .

    $default  reduce using rule 25 (state)


State 121

   26 state: simple_state state .

    $default  reduce using rule 26 (state)


State 122

   27 state: conditional_state state .

    $default  reduce using rule 27 (state)


State 123

   28 state: while_state state .

    $default  reduce using rule 28 (state)


State 124

   29 state: for_state state .

    $default  reduce using rule 29 (state)


State 125

   30 state: return_state state .

    $default  reduce using rule 30 (state)


State 126

   36 simple_state: expr ASSIGN . expr ';'

    '('    shift, and go to state 39
    SUB    shift, and go to state 40
    FALSE  shift, and go to state 41
    TRUE   shift, and go to state 42
    OCT    shift, and go to state 43
    ID     shift, and go to state 60
    INT    shift, and go to state 45
    FLOAT  shift, and go to state 46
    SCI    shift, and go to state 47

    func_invocation  go to state 49
    num              go to state 51
    expr             go to state 156


State 127

   12 scalar_type: ARRAY INT TO INT . OF scalar_type

    OF  shift, and go to state 157


State 128

   33 func_invocation: ID '(' func ')' .

    $default  reduce using rule 33 (func_invocation)


State 129

   70 bracket: '[' expr ']' . bracket

    '['  shift, and go to state 64

    $default  reduce using rule 71 (bracket)

    bracket  go to state 158


State 130

   48 func: id_list ':' scalar_type ';' . func

    '('    shift, and go to state 39
    SUB    shift, and go to state 40
    FALSE  shift, and go to state 41
    TRUE   shift, and go to state 42
    OCT    shift, and go to state 43
    ID     shift, and go to state 44
    INT    shift, and go to state 45
    FLOAT  shift, and go to state 46
    SCI    shift, and go to state 47

    $default  reduce using rule 51 (func)

    id_list          go to state 48
    func_invocation  go to state 49
    func             go to state 159
    num              go to state 51
    expr             go to state 52
    expr_f           go to state 53


State 131

   24 func_p: ID '(' func ')' ';' compound_state . END ID

    END  shift, and go to state 160


State 132

   23 func_d: ID '(' func ')' ':' scalar_type . ';' compound_state END ID

    ';'  shift, and go to state 161


State 133

   46 for_state: FOR ID ASSIGN . INT TO INT DO state END DO

    INT  shift, and go to state 162


State 134

   62 expr: expr . control expr
   63     | '(' expr . ')'
   84 boolean_expr: expr .

    ')'  shift, and go to state 96
    ADD  shift, and go to state 69
    SUB  shift, and go to state 70
    MUL  shift, and go to state 71
    DIV  shift, and go to state 72
    MOD  shift, and go to state 73

    ')'       [reduce using rule 84 (boolean_expr)]
    $default  reduce using rule 84 (boolean_expr)

    control  go to state 74


State 135

   74 boolean_expr: '(' boolean_expr . ')'
   75             | boolean_expr . GT boolean_expr
   76             | boolean_expr . LT boolean_expr
   77             | boolean_expr . EQ boolean_expr
   78             | boolean_expr . GE boolean_expr
   79             | boolean_expr . LE boolean_expr
   80             | boolean_expr . NE boolean_expr
   81             | boolean_expr . AND boolean_expr
   82             | boolean_expr . OR boolean_expr

    ')'  shift, and go to state 163
    GT   shift, and go to state 137
    GE   shift, and go to state 138
    NE   shift, and go to state 139
    LE   shift, and go to state 140
    LT   shift, and go to state 141
    EQ   shift, and go to state 142
    AND  shift, and go to state 143
    OR   shift, and go to state 144


State 136

   75 boolean_expr: boolean_expr . GT boolean_expr
   76             | boolean_expr . LT boolean_expr
   77             | boolean_expr . EQ boolean_expr
   78             | boolean_expr . GE boolean_expr
   79             | boolean_expr . LE boolean_expr
   80             | boolean_expr . NE boolean_expr
   81             | boolean_expr . AND boolean_expr
   82             | boolean_expr . OR boolean_expr
   83             | NOT boolean_expr .

    GT   shift, and go to state 137
    GE   shift, and go to state 138
    NE   shift, and go to state 139
    LE   shift, and go to state 140
    LT   shift, and go to state 141
    EQ   shift, and go to state 142
    AND  shift, and go to state 143
    OR   shift, and go to state 144

    GT        [reduce using rule 83 (boolean_expr)]
    GE        [reduce using rule 83 (boolean_expr)]
    NE        [reduce using rule 83 (boolean_expr)]
    LE        [reduce using rule 83 (boolean_expr)]
    LT        [reduce using rule 83 (boolean_expr)]
    EQ        [reduce using rule 83 (boolean_expr)]
    AND       [reduce using rule 83 (boolean_expr)]
    OR        [reduce using rule 83 (boolean_expr)]
    $default  reduce using rule 83 (boolean_expr)


State 137

   75 boolean_expr: boolean_expr GT . boolean_expr

    '('    shift, and go to state 105
    SUB    shift, and go to state 40
    NOT    shift, and go to state 106
    FALSE  shift, and go to state 41
    TRUE   shift, and go to state 42
    OCT    shift, and go to state 43
    ID     shift, and go to state 60
    INT    shift, and go to state 45
    FLOAT  shift, and go to state 46
    SCI    shift, and go to state 47

    func_invocation  go to state 49
    num              go to state 51
    expr             go to state 107
    boolean_expr     go to state 164


State 138

   78 boolean_expr: boolean_expr GE . boolean_expr

    '('    shift, and go to state 105
    SUB    shift, and go to state 40
    NOT    shift, and go to state 106
    FALSE  shift, and go to state 41
    TRUE   shift, and go to state 42
    OCT    shift, and go to state 43
    ID     shift, and go to state 60
    INT    shift, and go to state 45
    FLOAT  shift, and go to state 46
    SCI    shift, and go to state 47

    func_invocation  go to state 49
    num              go to state 51
    expr             go to state 107
    boolean_expr     go to state 165


State 139

   80 boolean_expr: boolean_expr NE . boolean_expr

    '('    shift, and go to state 105
    SUB    shift, and go to state 40
    NOT    shift, and go to state 106
    FALSE  shift, and go to state 41
    TRUE   shift, and go to state 42
    OCT    shift, and go to state 43
    ID     shift, and go to state 60
    INT    shift, and go to state 45
    FLOAT  shift, and go to state 46
    SCI    shift, and go to state 47

    func_invocation  go to state 49
    num              go to state 51
    expr             go to state 107
    boolean_expr     go to state 166


State 140

   79 boolean_expr: boolean_expr LE . boolean_expr

    '('    shift, and go to state 105
    SUB    shift, and go to state 40
    NOT    shift, and go to state 106
    FALSE  shift, and go to state 41
    TRUE   shift, and go to state 42
    OCT    shift, and go to state 43
    ID     shift, and go to state 60
    INT    shift, and go to state 45
    FLOAT  shift, and go to state 46
    SCI    shift, and go to state 47

    func_invocation  go to state 49
    num              go to state 51
    expr             go to state 107
    boolean_expr     go to state 167


State 141

   76 boolean_expr: boolean_expr LT . boolean_expr

    '('    shift, and go to state 105
    SUB    shift, and go to state 40
    NOT    shift, and go to state 106
    FALSE  shift, and go to state 41
    TRUE   shift, and go to state 42
    OCT    shift, and go to state 43
    ID     shift, and go to state 60
    INT    shift, and go to state 45
    FLOAT  shift, and go to state 46
    SCI    shift, and go to state 47

    func_invocation  go to state 49
    num              go to state 51
    expr             go to state 107
    boolean_expr     go to state 168


State 142

   77 boolean_expr: boolean_expr EQ . boolean_expr

    '('    shift, and go to state 105
    SUB    shift, and go to state 40
    NOT    shift, and go to state 106
    FALSE  shift, and go to state 41
    TRUE   shift, and go to state 42
    OCT    shift, and go to state 43
    ID     shift, and go to state 60
    INT    shift, and go to state 45
    FLOAT  shift, and go to state 46
    SCI    shift, and go to state 47

    func_invocation  go to state 49
    num              go to state 51
    expr             go to state 107
    boolean_expr     go to state 169


State 143

   81 boolean_expr: boolean_expr AND . boolean_expr

    '('    shift, and go to state 105
    SUB    shift, and go to state 40
    NOT    shift, and go to state 106
    FALSE  shift, and go to state 41
    TRUE   shift, and go to state 42
    OCT    shift, and go to state 43
    ID     shift, and go to state 60
    INT    shift, and go to state 45
    FLOAT  shift, and go to state 46
    SCI    shift, and go to state 47

    func_invocation  go to state 49
    num              go to state 51
    expr             go to state 107
    boolean_expr     go to state 170


State 144

   82 boolean_expr: boolean_expr OR . boolean_expr

    '('    shift, and go to state 105
    SUB    shift, and go to state 40
    NOT    shift, and go to state 106
    FALSE  shift, and go to state 41
    TRUE   shift, and go to state 42
    OCT    shift, and go to state 43
    ID     shift, and go to state 60
    INT    shift, and go to state 45
    FLOAT  shift, and go to state 46
    SCI    shift, and go to state 47

    func_invocation  go to state 49
    num              go to state 51
    expr             go to state 107
    boolean_expr     go to state 171


State 145

   43 conditional_state: IF boolean_expr THEN . state END IF
   44                  | IF boolean_expr THEN . state ELSE state END IF

    '('     shift, and go to state 39
    SUB     shift, and go to state 40
    BEG     shift, and go to state 19
    FALSE   shift, and go to state 41
    FOR     shift, and go to state 75
    IF      shift, and go to state 76
    PRINT   shift, and go to state 77
    READ    shift, and go to state 78
    TRUE    shift, and go to state 42
    WHILE   shift, and go to state 79
    OCT     shift, and go to state 43
    ID      shift, and go to state 80
    INT     shift, and go to state 45
    FLOAT   shift, and go to state 46
    SCI     shift, and go to state 47
    RETURN  shift, and go to state 81

    $default  reduce using rule 32 (state)

    state              go to state 172
    func_invocation    go to state 83
    compound_state     go to state 84
    simple_state       go to state 85
    conditional_state  go to state 86
    while_state        go to state 87
    for_state          go to state 88
    return_state       go to state 89
    num                go to state 51
    expr               go to state 90


State 146

   37 simple_state: PRINT ID ';' .

    $default  reduce using rule 37 (simple_state)


State 147

   38 simple_state: PRINT expr ';' .

    $default  reduce using rule 38 (simple_state)


State 148

   39 simple_state: PRINT str ';' .

    $default  reduce using rule 39 (simple_state)


State 149

   40 simple_state: READ ID ';' .

    $default  reduce using rule 40 (simple_state)


State 150

   41 simple_state: READ expr ';' .

    $default  reduce using rule 41 (simple_state)


State 151

   42 simple_state: READ str ';' .

    $default  reduce using rule 42 (simple_state)


State 152

   45 while_state: WHILE boolean_expr DO . state END DO

    '('     shift, and go to state 39
    SUB     shift, and go to state 40
    BEG     shift, and go to state 19
    FALSE   shift, and go to state 41
    FOR     shift, and go to state 75
    IF      shift, and go to state 76
    PRINT   shift, and go to state 77
    READ    shift, and go to state 78
    TRUE    shift, and go to state 42
    WHILE   shift, and go to state 79
    OCT     shift, and go to state 43
    ID      shift, and go to state 80
    INT     shift, and go to state 45
    FLOAT   shift, and go to state 46
    SCI     shift, and go to state 47
    RETURN  shift, and go to state 81

    $default  reduce using rule 32 (state)

    state              go to state 173
    func_invocation    go to state 83
    compound_state     go to state 84
    simple_state       go to state 85
    conditional_state  go to state 86
    while_state        go to state 87
    for_state          go to state 88
    return_state       go to state 89
    num                go to state 51
    expr               go to state 90


State 153

   35 simple_state: ID ASSIGN boolean_expr . ';'
   75 boolean_expr: boolean_expr . GT boolean_expr
   76             | boolean_expr . LT boolean_expr
   77             | boolean_expr . EQ boolean_expr
   78             | boolean_expr . GE boolean_expr
   79             | boolean_expr . LE boolean_expr
   80             | boolean_expr . NE boolean_expr
   81             | boolean_expr . AND boolean_expr
   82             | boolean_expr . OR boolean_expr

    ';'  shift, and go to state 174
    GT   shift, and go to state 137
    GE   shift, and go to state 138
    NE   shift, and go to state 139
    LE   shift, and go to state 140
    LT   shift, and go to state 141
    EQ   shift, and go to state 142
    AND  shift, and go to state 143
    OR   shift, and go to state 144


State 154

   47 return_state: RETURN boolean_expr ';' .

    $default  reduce using rule 47 (return_state)


State 155

   31 state: func_invocation ';' state .

    $default  reduce using rule 31 (state)


State 156

   36 simple_state: expr ASSIGN expr . ';'
   62 expr: expr . control expr

    ';'  shift, and go to state 175
    ADD  shift, and go to state 69
    SUB  shift, and go to state 70
    MUL  shift, and go to state 71
    DIV  shift, and go to state 72
    MOD  shift, and go to state 73

    control  go to state 74


State 157

   12 scalar_type: ARRAY INT TO INT OF . scalar_type

    ARRAY    shift, and go to state 24
    BOOLEAN  shift, and go to state 25
    INTEGER  shift, and go to state 27
    REAL     shift, and go to state 28
    STRING   shift, and go to state 35

    scalar_type  go to state 176


State 158

   70 bracket: '[' expr ']' bracket .

    $default  reduce using rule 70 (bracket)


State 159

   48 func: id_list ':' scalar_type ';' func .

    $default  reduce using rule 48 (func)


State 160

   24 func_p: ID '(' func ')' ';' compound_state END . ID

    ID  shift, and go to state 177


State 161

   23 func_d: ID '(' func ')' ':' scalar_type ';' . compound_state END ID

    BEG  shift, and go to state 19

    compound_state  go to state 178


State 162

   46 for_state: FOR ID ASSIGN INT . TO INT DO state END DO

    TO  shift, and go to state 179


State 163

   74 boolean_expr: '(' boolean_expr ')' .

    $default  reduce using rule 74 (boolean_expr)


State 164

   75 boolean_expr: boolean_expr . GT boolean_expr
   75             | boolean_expr GT boolean_expr .
   76             | boolean_expr . LT boolean_expr
   77             | boolean_expr . EQ boolean_expr
   78             | boolean_expr . GE boolean_expr
   79             | boolean_expr . LE boolean_expr
   80             | boolean_expr . NE boolean_expr
   81             | boolean_expr . AND boolean_expr
   82             | boolean_expr . OR boolean_expr

    GT   shift, and go to state 137
    GE   shift, and go to state 138
    NE   shift, and go to state 139
    LE   shift, and go to state 140
    LT   shift, and go to state 141
    EQ   shift, and go to state 142
    AND  shift, and go to state 143
    OR   shift, and go to state 144

    GT        [reduce using rule 75 (boolean_expr)]
    GE        [reduce using rule 75 (boolean_expr)]
    NE        [reduce using rule 75 (boolean_expr)]
    LE        [reduce using rule 75 (boolean_expr)]
    LT        [reduce using rule 75 (boolean_expr)]
    EQ        [reduce using rule 75 (boolean_expr)]
    AND       [reduce using rule 75 (boolean_expr)]
    OR        [reduce using rule 75 (boolean_expr)]
    $default  reduce using rule 75 (boolean_expr)


State 165

   75 boolean_expr: boolean_expr . GT boolean_expr
   76             | boolean_expr . LT boolean_expr
   77             | boolean_expr . EQ boolean_expr
   78             | boolean_expr . GE boolean_expr
   78             | boolean_expr GE boolean_expr .
   79             | boolean_expr . LE boolean_expr
   80             | boolean_expr . NE boolean_expr
   81             | boolean_expr . AND boolean_expr
   82             | boolean_expr . OR boolean_expr

    GT   shift, and go to state 137
    GE   shift, and go to state 138
    NE   shift, and go to state 139
    LE   shift, and go to state 140
    LT   shift, and go to state 141
    EQ   shift, and go to state 142
    AND  shift, and go to state 143
    OR   shift, and go to state 144

    GT        [reduce using rule 78 (boolean_expr)]
    GE        [reduce using rule 78 (boolean_expr)]
    NE        [reduce using rule 78 (boolean_expr)]
    LE        [reduce using rule 78 (boolean_expr)]
    LT        [reduce using rule 78 (boolean_expr)]
    EQ        [reduce using rule 78 (boolean_expr)]
    AND       [reduce using rule 78 (boolean_expr)]
    OR        [reduce using rule 78 (boolean_expr)]
    $default  reduce using rule 78 (boolean_expr)


State 166

   75 boolean_expr: boolean_expr . GT boolean_expr
   76             | boolean_expr . LT boolean_expr
   77             | boolean_expr . EQ boolean_expr
   78             | boolean_expr . GE boolean_expr
   79             | boolean_expr . LE boolean_expr
   80             | boolean_expr . NE boolean_expr
   80             | boolean_expr NE boolean_expr .
   81             | boolean_expr . AND boolean_expr
   82             | boolean_expr . OR boolean_expr

    GT   shift, and go to state 137
    GE   shift, and go to state 138
    NE   shift, and go to state 139
    LE   shift, and go to state 140
    LT   shift, and go to state 141
    EQ   shift, and go to state 142
    AND  shift, and go to state 143
    OR   shift, and go to state 144

    GT        [reduce using rule 80 (boolean_expr)]
    GE        [reduce using rule 80 (boolean_expr)]
    NE        [reduce using rule 80 (boolean_expr)]
    LE        [reduce using rule 80 (boolean_expr)]
    LT        [reduce using rule 80 (boolean_expr)]
    EQ        [reduce using rule 80 (boolean_expr)]
    AND       [reduce using rule 80 (boolean_expr)]
    OR        [reduce using rule 80 (boolean_expr)]
    $default  reduce using rule 80 (boolean_expr)


State 167

   75 boolean_expr: boolean_expr . GT boolean_expr
   76             | boolean_expr . LT boolean_expr
   77             | boolean_expr . EQ boolean_expr
   78             | boolean_expr . GE boolean_expr
   79             | boolean_expr . LE boolean_expr
   79             | boolean_expr LE boolean_expr .
   80             | boolean_expr . NE boolean_expr
   81             | boolean_expr . AND boolean_expr
   82             | boolean_expr . OR boolean_expr

    GT   shift, and go to state 137
    GE   shift, and go to state 138
    NE   shift, and go to state 139
    LE   shift, and go to state 140
    LT   shift, and go to state 141
    EQ   shift, and go to state 142
    AND  shift, and go to state 143
    OR   shift, and go to state 144

    GT        [reduce using rule 79 (boolean_expr)]
    GE        [reduce using rule 79 (boolean_expr)]
    NE        [reduce using rule 79 (boolean_expr)]
    LE        [reduce using rule 79 (boolean_expr)]
    LT        [reduce using rule 79 (boolean_expr)]
    EQ        [reduce using rule 79 (boolean_expr)]
    AND       [reduce using rule 79 (boolean_expr)]
    OR        [reduce using rule 79 (boolean_expr)]
    $default  reduce using rule 79 (boolean_expr)


State 168

   75 boolean_expr: boolean_expr . GT boolean_expr
   76             | boolean_expr . LT boolean_expr
   76             | boolean_expr LT boolean_expr .
   77             | boolean_expr . EQ boolean_expr
   78             | boolean_expr . GE boolean_expr
   79             | boolean_expr . LE boolean_expr
   80             | boolean_expr . NE boolean_expr
   81             | boolean_expr . AND boolean_expr
   82             | boolean_expr . OR boolean_expr

    GT   shift, and go to state 137
    GE   shift, and go to state 138
    NE   shift, and go to state 139
    LE   shift, and go to state 140
    LT   shift, and go to state 141
    EQ   shift, and go to state 142
    AND  shift, and go to state 143
    OR   shift, and go to state 144

    GT        [reduce using rule 76 (boolean_expr)]
    GE        [reduce using rule 76 (boolean_expr)]
    NE        [reduce using rule 76 (boolean_expr)]
    LE        [reduce using rule 76 (boolean_expr)]
    LT        [reduce using rule 76 (boolean_expr)]
    EQ        [reduce using rule 76 (boolean_expr)]
    AND       [reduce using rule 76 (boolean_expr)]
    OR        [reduce using rule 76 (boolean_expr)]
    $default  reduce using rule 76 (boolean_expr)


State 169

   75 boolean_expr: boolean_expr . GT boolean_expr
   76             | boolean_expr . LT boolean_expr
   77             | boolean_expr . EQ boolean_expr
   77             | boolean_expr EQ boolean_expr .
   78             | boolean_expr . GE boolean_expr
   79             | boolean_expr . LE boolean_expr
   80             | boolean_expr . NE boolean_expr
   81             | boolean_expr . AND boolean_expr
   82             | boolean_expr . OR boolean_expr

    GT   shift, and go to state 137
    GE   shift, and go to state 138
    NE   shift, and go to state 139
    LE   shift, and go to state 140
    LT   shift, and go to state 141
    EQ   shift, and go to state 142
    AND  shift, and go to state 143
    OR   shift, and go to state 144

    GT        [reduce using rule 77 (boolean_expr)]
    GE        [reduce using rule 77 (boolean_expr)]
    NE        [reduce using rule 77 (boolean_expr)]
    LE        [reduce using rule 77 (boolean_expr)]
    LT        [reduce using rule 77 (boolean_expr)]
    EQ        [reduce using rule 77 (boolean_expr)]
    AND       [reduce using rule 77 (boolean_expr)]
    OR        [reduce using rule 77 (boolean_expr)]
    $default  reduce using rule 77 (boolean_expr)


State 170

   75 boolean_expr: boolean_expr . GT boolean_expr
   76             | boolean_expr . LT boolean_expr
   77             | boolean_expr . EQ boolean_expr
   78             | boolean_expr . GE boolean_expr
   79             | boolean_expr . LE boolean_expr
   80             | boolean_expr . NE boolean_expr
   81             | boolean_expr . AND boolean_expr
   81             | boolean_expr AND boolean_expr .
   82             | boolean_expr . OR boolean_expr

    GT   shift, and go to state 137
    GE   shift, and go to state 138
    NE   shift, and go to state 139
    LE   shift, and go to state 140
    LT   shift, and go to state 141
    EQ   shift, and go to state 142
    AND  shift, and go to state 143
    OR   shift, and go to state 144

    GT        [reduce using rule 81 (boolean_expr)]
    GE        [reduce using rule 81 (boolean_expr)]
    NE        [reduce using rule 81 (boolean_expr)]
    LE        [reduce using rule 81 (boolean_expr)]
    LT        [reduce using rule 81 (boolean_expr)]
    EQ        [reduce using rule 81 (boolean_expr)]
    AND       [reduce using rule 81 (boolean_expr)]
    OR        [reduce using rule 81 (boolean_expr)]
    $default  reduce using rule 81 (boolean_expr)


State 171

   75 boolean_expr: boolean_expr . GT boolean_expr
   76             | boolean_expr . LT boolean_expr
   77             | boolean_expr . EQ boolean_expr
   78             | boolean_expr . GE boolean_expr
   79             | boolean_expr . LE boolean_expr
   80             | boolean_expr . NE boolean_expr
   81             | boolean_expr . AND boolean_expr
   82             | boolean_expr . OR boolean_expr
   82             | boolean_expr OR boolean_expr .

    GT   shift, and go to state 137
    GE   shift, and go to state 138
    NE   shift, and go to state 139
    LE   shift, and go to state 140
    LT   shift, and go to state 141
    EQ   shift, and go to state 142
    AND  shift, and go to state 143
    OR   shift, and go to state 144

    GT        [reduce using rule 82 (boolean_expr)]
    GE        [reduce using rule 82 (boolean_expr)]
    NE        [reduce using rule 82 (boolean_expr)]
    LE        [reduce using rule 82 (boolean_expr)]
    LT        [reduce using rule 82 (boolean_expr)]
    EQ        [reduce using rule 82 (boolean_expr)]
    AND       [reduce using rule 82 (boolean_expr)]
    OR        [reduce using rule 82 (boolean_expr)]
    $default  reduce using rule 82 (boolean_expr)


State 172

   43 conditional_state: IF boolean_expr THEN state . END IF
   44                  | IF boolean_expr THEN state . ELSE state END IF

    ELSE  shift, and go to state 180
    END   shift, and go to state 181


State 173

   45 while_state: WHILE boolean_expr DO state . END DO

    END  shift, and go to state 182


State 174

   35 simple_state: ID ASSIGN boolean_expr ';' .

    $default  reduce using rule 35 (simple_state)


State 175

   36 simple_state: expr ASSIGN expr ';' .

    $default  reduce using rule 36 (simple_state)


State 176

   12 scalar_type: ARRAY INT TO INT OF scalar_type .

    $default  reduce using rule 12 (scalar_type)


State 177

   24 func_p: ID '(' func ')' ';' compound_state END ID .

    $default  reduce using rule 24 (func_p)


State 178

   23 func_d: ID '(' func ')' ':' scalar_type ';' compound_state . END ID

    END  shift, and go to state 183


State 179

   46 for_state: FOR ID ASSIGN INT TO . INT DO state END DO

    INT  shift, and go to state 184


State 180

   44 conditional_state: IF boolean_expr THEN state ELSE . state END IF

    '('     shift, and go to state 39
    SUB     shift, and go to state 40
    BEG     shift, and go to state 19
    FALSE   shift, and go to state 41
    FOR     shift, and go to state 75
    IF      shift, and go to state 76
    PRINT   shift, and go to state 77
    READ    shift, and go to state 78
    TRUE    shift, and go to state 42
    WHILE   shift, and go to state 79
    OCT     shift, and go to state 43
    ID      shift, and go to state 80
    INT     shift, and go to state 45
    FLOAT   shift, and go to state 46
    SCI     shift, and go to state 47
    RETURN  shift, and go to state 81

    $default  reduce using rule 32 (state)

    state              go to state 185
    func_invocation    go to state 83
    compound_state     go to state 84
    simple_state       go to state 85
    conditional_state  go to state 86
    while_state        go to state 87
    for_state          go to state 88
    return_state       go to state 89
    num                go to state 51
    expr               go to state 90


State 181

   43 conditional_state: IF boolean_expr THEN state END . IF

    IF  shift, and go to state 186


State 182

   45 while_state: WHILE boolean_expr DO state END . DO

    DO  shift, and go to state 187


State 183

   23 func_d: ID '(' func ')' ':' scalar_type ';' compound_state END . ID

    ID  shift, and go to state 188


State 184

   46 for_state: FOR ID ASSIGN INT TO INT . DO state END DO

    DO  shift, and go to state 189


State 185

   44 conditional_state: IF boolean_expr THEN state ELSE state . END IF

    END  shift, and go to state 190


State 186

   43 conditional_state: IF boolean_expr THEN state END IF .

    $default  reduce using rule 43 (conditional_state)


State 187

   45 while_state: WHILE boolean_expr DO state END DO .

    $default  reduce using rule 45 (while_state)


State 188

   23 func_d: ID '(' func ')' ':' scalar_type ';' compound_state END ID .

    $default  reduce using rule 23 (func_d)


State 189

   46 for_state: FOR ID ASSIGN INT TO INT DO . state END DO

    '('     shift, and go to state 39
    SUB     shift, and go to state 40
    BEG     shift, and go to state 19
    FALSE   shift, and go to state 41
    FOR     shift, and go to state 75
    IF      shift, and go to state 76
    PRINT   shift, and go to state 77
    READ    shift, and go to state 78
    TRUE    shift, and go to state 42
    WHILE   shift, and go to state 79
    OCT     shift, and go to state 43
    ID      shift, and go to state 80
    INT     shift, and go to state 45
    FLOAT   shift, and go to state 46
    SCI     shift, and go to state 47
    RETURN  shift, and go to state 81

    $default  reduce using rule 32 (state)

    state              go to state 191
    func_invocation    go to state 83
    compound_state     go to state 84
    simple_state       go to state 85
    conditional_state  go to state 86
    while_state        go to state 87
    for_state          go to state 88
    return_state       go to state 89
    num                go to state 51
    expr               go to state 90


State 190

   44 conditional_state: IF boolean_expr THEN state ELSE state END . IF

    IF  shift, and go to state 192


State 191

   46 for_state: FOR ID ASSIGN INT TO INT DO state . END DO

    END  shift, and go to state 193


State 192

   44 conditional_state: IF boolean_expr THEN state ELSE state END IF .

    $default  reduce using rule 44 (conditional_state)


State 193

   46 for_state: FOR ID ASSIGN INT TO INT DO state END . DO

    DO  shift, and go to state 194


State 194

   46 for_state: FOR ID ASSIGN INT TO INT DO state END DO .

    $default  reduce using rule 46 (for_state)
