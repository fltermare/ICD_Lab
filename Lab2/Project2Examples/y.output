Terminals unused in grammar

   DEF


State 45 conflicts: 1 shift/reduce, 7 reduce/reduce
State 59 conflicts: 20 reduce/reduce
State 61 conflicts: 20 reduce/reduce
State 62 conflicts: 5 shift/reduce
State 63 conflicts: 5 shift/reduce
State 80 conflicts: 1 shift/reduce, 6 reduce/reduce
State 103 conflicts: 5 shift/reduce
State 108 conflicts: 1 shift/reduce, 6 reduce/reduce
State 111 conflicts: 1 shift/reduce, 6 reduce/reduce
State 135 conflicts: 1 shift/reduce
State 154 conflicts: 1 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: ID ';' programbody END ID

    2 programbody: var_d function compound_state

    3 var_d: VAR id_list ':' scalar_type ';' var_d
    4      | VAR id_list ':' literal_constant ';' var_d
    5      | %empty

    6 id_list: ID ',' id_list
    7        | ID

    8 scalar_type: INTEGER
    9            | REAL
   10            | STRING
   11            | BOOLEAN
   12            | ARRAY INT TO INT OF scalar_type

   13 literal_constant: INT
   14                 | OCT
   15                 | SCI
   16                 | FLOAT
   17                 | str
   18                 | FALSE
   19                 | TRUE

   20 function: func_d function
   21         | func_p function
   22         | %empty

   23 func_d: ID '(' func ')' ':' scalar_type ';' compound_state END ID

   24 func_p: ID '(' func ')' ';' compound_state END ID

   25 state: compound_state state
   26      | simple_state state
   27      | conditional_state state
   28      | while_state state
   29      | for_state state
   30      | return_state state
   31      | func_invocation state
   32      | %empty

   33 func_invocation: ID '(' func ')' ';'

   34 compound_state: BEG var_d state END

   35 simple_state: ID ASSIGN boolean_expr ';'
   36             | expr ASSIGN boolean_expr ';'
   37             | PRINT ID ';'
   38             | PRINT expr ';'
   39             | PRINT str ';'
   40             | READ ID ';'
   41             | READ expr ';'
   42             | READ str ';'

   43 conditional_state: IF boolean_expr THEN state END IF
   44                  | IF boolean_expr THEN state ELSE state END IF

   45 while_state: WHILE boolean_expr DO state END DO

   46 for_state: FOR ID ASSIGN INT TO INT DO state END DO

   47 return_state: RETURN boolean_expr ';'

   48 func: id_list ':' scalar_type ';' func
   49     | id_list ':' scalar_type
   50     | expr
   51     | %empty

   52 num: INT
   53    | OCT
   54    | SCI
   55    | FLOAT

   56 control: ADD
   57        | SUB
   58        | MUL
   59        | DIV
   60        | MOD

   61 expr: SUB num
   62     | SUB expr
   63     | NOT expr
   64     | expr control expr
   65     | '(' expr ')'
   66     | num
   67     | ID
   68     | ID '(' expr_f ')'
   69     | ID bracket
   70     | TRUE
   71     | FALSE

   72 bracket: '[' expr ']' bracket
   73        | %empty

   74 expr_f: expr ',' expr_f
   75       | expr

   76 boolean_expr: '(' boolean_expr ')'
   77             | expr GT expr boolean_expr2
   78             | expr LT expr boolean_expr2
   79             | expr EQ expr boolean_expr2
   80             | expr GE expr boolean_expr2
   81             | expr LE expr boolean_expr2
   82             | expr NE expr boolean_expr2
   83             | expr AND expr boolean_expr2
   84             | expr OR expr boolean_expr2
   85             | expr

   86 boolean_expr2: GT expr boolean_expr2
   87              | LT expr boolean_expr2
   88              | EQ expr boolean_expr2
   89              | GE expr boolean_expr2
   90              | LE expr boolean_expr2
   91              | NE expr boolean_expr2
   92              | AND expr boolean_expr2
   93              | OR expr boolean_expr2
   94              | %empty

   95 str: BS str_c BSSS

   96 str_c: BSS str_c
   97      | BSS


Terminals, with rules where they appear

$end (0) 0
'(' (40) 23 24 33 65 68 76
')' (41) 23 24 33 65 68 76
',' (44) 6 74
':' (58) 3 4 23 48 49
';' (59) 1 3 4 23 24 33 35 36 37 38 39 40 41 42 47 48
'[' (91) 72
']' (93) 72
error (256)
ADD (258) 56
SUB (259) 57 61 62
MUL (260) 58
DIV (261) 59
MOD (262) 60
ASSIGN (263) 35 36 46
GT (264) 77 86
GE (265) 80 89
NE (266) 82 91
LE (267) 81 90
LT (268) 78 87
EQ (269) 79 88
AND (270) 83 92
OR (271) 84 93
NOT (272) 63
ARRAY (273) 12
BEG (274) 34
BOOLEAN (275) 11
DEF (276)
DO (277) 45 46
ELSE (278) 44
END (279) 1 23 24 34 43 44 45 46
FALSE (280) 18 71
FOR (281) 46
INTEGER (282) 8
IF (283) 43 44
OF (284) 12
PRINT (285) 37 38 39
READ (286) 40 41 42
REAL (287) 9
THEN (288) 43 44
TO (289) 12 46
TRUE (290) 19 70
VAR (291) 3 4
WHILE (292) 45
OCT (293) 14 53
ID (294) 1 6 7 23 24 33 35 37 40 46 67 68 69
INT (295) 12 13 46 52
FLOAT (296) 16 55
SCI (297) 15 54
RETURN (298) 47
BS (299) 95
BSS (300) 96 97
BSSS (301) 95
STRING (302) 10


Nonterminals, with rules where they appear

$accept (55)
    on left: 0
program (56)
    on left: 1, on right: 0
programbody (57)
    on left: 2, on right: 1
var_d (58)
    on left: 3 4 5, on right: 2 3 4 34
id_list (59)
    on left: 6 7, on right: 3 4 6 48 49
scalar_type (60)
    on left: 8 9 10 11 12, on right: 3 12 23 48 49
literal_constant (61)
    on left: 13 14 15 16 17 18 19, on right: 4
function (62)
    on left: 20 21 22, on right: 2 20 21
func_d (63)
    on left: 23, on right: 20
func_p (64)
    on left: 24, on right: 21
state (65)
    on left: 25 26 27 28 29 30 31 32, on right: 25 26 27 28 29 30 31
    34 43 44 45 46
func_invocation (66)
    on left: 33, on right: 31
compound_state (67)
    on left: 34, on right: 2 23 24 25
simple_state (68)
    on left: 35 36 37 38 39 40 41 42, on right: 26
conditional_state (69)
    on left: 43 44, on right: 27
while_state (70)
    on left: 45, on right: 28
for_state (71)
    on left: 46, on right: 29
return_state (72)
    on left: 47, on right: 30
func (73)
    on left: 48 49 50 51, on right: 23 24 33 48
num (74)
    on left: 52 53 54 55, on right: 61 66
control (75)
    on left: 56 57 58 59 60, on right: 64
expr (76)
    on left: 61 62 63 64 65 66 67 68 69 70 71, on right: 36 38 41 50
    62 63 64 65 72 74 75 77 78 79 80 81 82 83 84 85 86 87 88 89 90
    91 92 93
bracket (77)
    on left: 72 73, on right: 69 72
expr_f (78)
    on left: 74 75, on right: 68 74
boolean_expr (79)
    on left: 76 77 78 79 80 81 82 83 84 85, on right: 35 36 43 44 45
    47 76
boolean_expr2 (80)
    on left: 86 87 88 89 90 91 92 93 94, on right: 77 78 79 80 81 82
    83 84 86 87 88 89 90 91 92 93
str (81)
    on left: 95, on right: 17 39 42
str_c (82)
    on left: 96 97, on right: 95 96


State 0

    0 $accept: . program $end

    ID  shift, and go to state 1

    program  go to state 2


State 1

    1 program: ID . ';' programbody END ID

    ';'  shift, and go to state 3


State 2

    0 $accept: program . $end

    $end  shift, and go to state 4


State 3

    1 program: ID ';' . programbody END ID

    VAR  shift, and go to state 5

    $default  reduce using rule 5 (var_d)

    programbody  go to state 6
    var_d        go to state 7


State 4

    0 $accept: program $end .

    $default  accept


State 5

    3 var_d: VAR . id_list ':' scalar_type ';' var_d
    4      | VAR . id_list ':' literal_constant ';' var_d

    ID  shift, and go to state 8

    id_list  go to state 9


State 6

    1 program: ID ';' programbody . END ID

    END  shift, and go to state 10


State 7

    2 programbody: var_d . function compound_state

    ID  shift, and go to state 11

    $default  reduce using rule 22 (function)

    function  go to state 12
    func_d    go to state 13
    func_p    go to state 14


State 8

    6 id_list: ID . ',' id_list
    7        | ID .

    ','  shift, and go to state 15

    $default  reduce using rule 7 (id_list)


State 9

    3 var_d: VAR id_list . ':' scalar_type ';' var_d
    4      | VAR id_list . ':' literal_constant ';' var_d

    ':'  shift, and go to state 16


State 10

    1 program: ID ';' programbody END . ID

    ID  shift, and go to state 17


State 11

   23 func_d: ID . '(' func ')' ':' scalar_type ';' compound_state END ID
   24 func_p: ID . '(' func ')' ';' compound_state END ID

    '('  shift, and go to state 18


State 12

    2 programbody: var_d function . compound_state

    BEG  shift, and go to state 19

    compound_state  go to state 20


State 13

   20 function: func_d . function

    ID  shift, and go to state 11

    $default  reduce using rule 22 (function)

    function  go to state 21
    func_d    go to state 13
    func_p    go to state 14


State 14

   21 function: func_p . function

    ID  shift, and go to state 11

    $default  reduce using rule 22 (function)

    function  go to state 22
    func_d    go to state 13
    func_p    go to state 14


State 15

    6 id_list: ID ',' . id_list

    ID  shift, and go to state 8

    id_list  go to state 23


State 16

    3 var_d: VAR id_list ':' . scalar_type ';' var_d
    4      | VAR id_list ':' . literal_constant ';' var_d

    ARRAY    shift, and go to state 24
    BOOLEAN  shift, and go to state 25
    FALSE    shift, and go to state 26
    INTEGER  shift, and go to state 27
    REAL     shift, and go to state 28
    TRUE     shift, and go to state 29
    OCT      shift, and go to state 30
    INT      shift, and go to state 31
    FLOAT    shift, and go to state 32
    SCI      shift, and go to state 33
    BS       shift, and go to state 34
    STRING   shift, and go to state 35

    scalar_type       go to state 36
    literal_constant  go to state 37
    str               go to state 38


State 17

    1 program: ID ';' programbody END ID .

    $default  reduce using rule 1 (program)


State 18

   23 func_d: ID '(' . func ')' ':' scalar_type ';' compound_state END ID
   24 func_p: ID '(' . func ')' ';' compound_state END ID

    '('    shift, and go to state 39
    SUB    shift, and go to state 40
    NOT    shift, and go to state 41
    FALSE  shift, and go to state 42
    TRUE   shift, and go to state 43
    OCT    shift, and go to state 44
    ID     shift, and go to state 45
    INT    shift, and go to state 46
    FLOAT  shift, and go to state 47
    SCI    shift, and go to state 48

    $default  reduce using rule 51 (func)

    id_list  go to state 49
    func     go to state 50
    num      go to state 51
    expr     go to state 52


State 19

   34 compound_state: BEG . var_d state END

    VAR  shift, and go to state 5

    $default  reduce using rule 5 (var_d)

    var_d  go to state 53


State 20

    2 programbody: var_d function compound_state .

    $default  reduce using rule 2 (programbody)


State 21

   20 function: func_d function .

    $default  reduce using rule 20 (function)


State 22

   21 function: func_p function .

    $default  reduce using rule 21 (function)


State 23

    6 id_list: ID ',' id_list .

    $default  reduce using rule 6 (id_list)


State 24

   12 scalar_type: ARRAY . INT TO INT OF scalar_type

    INT  shift, and go to state 54


State 25

   11 scalar_type: BOOLEAN .

    $default  reduce using rule 11 (scalar_type)


State 26

   18 literal_constant: FALSE .

    $default  reduce using rule 18 (literal_constant)


State 27

    8 scalar_type: INTEGER .

    $default  reduce using rule 8 (scalar_type)


State 28

    9 scalar_type: REAL .

    $default  reduce using rule 9 (scalar_type)


State 29

   19 literal_constant: TRUE .

    $default  reduce using rule 19 (literal_constant)


State 30

   14 literal_constant: OCT .

    $default  reduce using rule 14 (literal_constant)


State 31

   13 literal_constant: INT .

    $default  reduce using rule 13 (literal_constant)


State 32

   16 literal_constant: FLOAT .

    $default  reduce using rule 16 (literal_constant)


State 33

   15 literal_constant: SCI .

    $default  reduce using rule 15 (literal_constant)


State 34

   95 str: BS . str_c BSSS

    BSS  shift, and go to state 55

    str_c  go to state 56


State 35

   10 scalar_type: STRING .

    $default  reduce using rule 10 (scalar_type)


State 36

    3 var_d: VAR id_list ':' scalar_type . ';' var_d

    ';'  shift, and go to state 57


State 37

    4 var_d: VAR id_list ':' literal_constant . ';' var_d

    ';'  shift, and go to state 58


State 38

   17 literal_constant: str .

    $default  reduce using rule 17 (literal_constant)


State 39

   65 expr: '(' . expr ')'

    '('    shift, and go to state 39
    SUB    shift, and go to state 40
    NOT    shift, and go to state 41
    FALSE  shift, and go to state 42
    TRUE   shift, and go to state 43
    OCT    shift, and go to state 44
    ID     shift, and go to state 59
    INT    shift, and go to state 46
    FLOAT  shift, and go to state 47
    SCI    shift, and go to state 48

    num   go to state 51
    expr  go to state 60


State 40

   61 expr: SUB . num
   62     | SUB . expr

    '('    shift, and go to state 39
    SUB    shift, and go to state 40
    NOT    shift, and go to state 41
    FALSE  shift, and go to state 42
    TRUE   shift, and go to state 43
    OCT    shift, and go to state 44
    ID     shift, and go to state 59
    INT    shift, and go to state 46
    FLOAT  shift, and go to state 47
    SCI    shift, and go to state 48

    num   go to state 61
    expr  go to state 62


State 41

   63 expr: NOT . expr

    '('    shift, and go to state 39
    SUB    shift, and go to state 40
    NOT    shift, and go to state 41
    FALSE  shift, and go to state 42
    TRUE   shift, and go to state 43
    OCT    shift, and go to state 44
    ID     shift, and go to state 59
    INT    shift, and go to state 46
    FLOAT  shift, and go to state 47
    SCI    shift, and go to state 48

    num   go to state 51
    expr  go to state 63


State 42

   71 expr: FALSE .

    $default  reduce using rule 71 (expr)


State 43

   70 expr: TRUE .

    $default  reduce using rule 70 (expr)


State 44

   53 num: OCT .

    $default  reduce using rule 53 (num)


State 45

    6 id_list: ID . ',' id_list
    7        | ID .
   67 expr: ID .
   68     | ID . '(' expr_f ')'
   69     | ID . bracket

    ','  shift, and go to state 15
    '('  shift, and go to state 64
    '['  shift, and go to state 65

    ','       [reduce using rule 67 (expr)]
    ','       [reduce using rule 73 (bracket)]
    ':'       reduce using rule 7 (id_list)
    ')'       reduce using rule 67 (expr)
    ')'       [reduce using rule 73 (bracket)]
    ADD       reduce using rule 67 (expr)
    ADD       [reduce using rule 73 (bracket)]
    SUB       reduce using rule 67 (expr)
    SUB       [reduce using rule 73 (bracket)]
    MUL       reduce using rule 67 (expr)
    MUL       [reduce using rule 73 (bracket)]
    DIV       reduce using rule 67 (expr)
    DIV       [reduce using rule 73 (bracket)]
    MOD       reduce using rule 67 (expr)
    MOD       [reduce using rule 73 (bracket)]
    $default  reduce using rule 67 (expr)

    bracket  go to state 66


State 46

   52 num: INT .

    $default  reduce using rule 52 (num)


State 47

   55 num: FLOAT .

    $default  reduce using rule 55 (num)


State 48

   54 num: SCI .

    $default  reduce using rule 54 (num)


State 49

   48 func: id_list . ':' scalar_type ';' func
   49     | id_list . ':' scalar_type

    ':'  shift, and go to state 67


State 50

   23 func_d: ID '(' func . ')' ':' scalar_type ';' compound_state END ID
   24 func_p: ID '(' func . ')' ';' compound_state END ID

    ')'  shift, and go to state 68


State 51

   66 expr: num .

    $default  reduce using rule 66 (expr)


State 52

   50 func: expr .
   64 expr: expr . control expr

    ADD  shift, and go to state 69
    SUB  shift, and go to state 70
    MUL  shift, and go to state 71
    DIV  shift, and go to state 72
    MOD  shift, and go to state 73

    $default  reduce using rule 50 (func)

    control  go to state 74


State 53

   34 compound_state: BEG var_d . state END

    '('     shift, and go to state 39
    SUB     shift, and go to state 40
    NOT     shift, and go to state 41
    BEG     shift, and go to state 19
    FALSE   shift, and go to state 42
    FOR     shift, and go to state 75
    IF      shift, and go to state 76
    PRINT   shift, and go to state 77
    READ    shift, and go to state 78
    TRUE    shift, and go to state 43
    WHILE   shift, and go to state 79
    OCT     shift, and go to state 44
    ID      shift, and go to state 80
    INT     shift, and go to state 46
    FLOAT   shift, and go to state 47
    SCI     shift, and go to state 48
    RETURN  shift, and go to state 81

    $default  reduce using rule 32 (state)

    state              go to state 82
    func_invocation    go to state 83
    compound_state     go to state 84
    simple_state       go to state 85
    conditional_state  go to state 86
    while_state        go to state 87
    for_state          go to state 88
    return_state       go to state 89
    num                go to state 51
    expr               go to state 90


State 54

   12 scalar_type: ARRAY INT . TO INT OF scalar_type

    TO  shift, and go to state 91


State 55

   96 str_c: BSS . str_c
   97      | BSS .

    BSS  shift, and go to state 55

    $default  reduce using rule 97 (str_c)

    str_c  go to state 92


State 56

   95 str: BS str_c . BSSS

    BSSS  shift, and go to state 93


State 57

    3 var_d: VAR id_list ':' scalar_type ';' . var_d

    VAR  shift, and go to state 5

    $default  reduce using rule 5 (var_d)

    var_d  go to state 94


State 58

    4 var_d: VAR id_list ':' literal_constant ';' . var_d

    VAR  shift, and go to state 5

    $default  reduce using rule 5 (var_d)

    var_d  go to state 95


State 59

   67 expr: ID .
   68     | ID . '(' expr_f ')'
   69     | ID . bracket

    '('  shift, and go to state 64
    '['  shift, and go to state 65

    ','       reduce using rule 67 (expr)
    ','       [reduce using rule 73 (bracket)]
    ';'       reduce using rule 67 (expr)
    ';'       [reduce using rule 73 (bracket)]
    ')'       reduce using rule 67 (expr)
    ')'       [reduce using rule 73 (bracket)]
    ']'       reduce using rule 67 (expr)
    ']'       [reduce using rule 73 (bracket)]
    ADD       reduce using rule 67 (expr)
    ADD       [reduce using rule 73 (bracket)]
    SUB       reduce using rule 67 (expr)
    SUB       [reduce using rule 73 (bracket)]
    MUL       reduce using rule 67 (expr)
    MUL       [reduce using rule 73 (bracket)]
    DIV       reduce using rule 67 (expr)
    DIV       [reduce using rule 73 (bracket)]
    MOD       reduce using rule 67 (expr)
    MOD       [reduce using rule 73 (bracket)]
    ASSIGN    reduce using rule 67 (expr)
    ASSIGN    [reduce using rule 73 (bracket)]
    GT        reduce using rule 67 (expr)
    GT        [reduce using rule 73 (bracket)]
    GE        reduce using rule 67 (expr)
    GE        [reduce using rule 73 (bracket)]
    NE        reduce using rule 67 (expr)
    NE        [reduce using rule 73 (bracket)]
    LE        reduce using rule 67 (expr)
    LE        [reduce using rule 73 (bracket)]
    LT        reduce using rule 67 (expr)
    LT        [reduce using rule 73 (bracket)]
    EQ        reduce using rule 67 (expr)
    EQ        [reduce using rule 73 (bracket)]
    AND       reduce using rule 67 (expr)
    AND       [reduce using rule 73 (bracket)]
    OR        reduce using rule 67 (expr)
    OR        [reduce using rule 73 (bracket)]
    DO        reduce using rule 67 (expr)
    DO        [reduce using rule 73 (bracket)]
    THEN      reduce using rule 67 (expr)
    THEN      [reduce using rule 73 (bracket)]
    $default  reduce using rule 67 (expr)

    bracket  go to state 66


State 60

   64 expr: expr . control expr
   65     | '(' expr . ')'

    ')'  shift, and go to state 96
    ADD  shift, and go to state 69
    SUB  shift, and go to state 70
    MUL  shift, and go to state 71
    DIV  shift, and go to state 72
    MOD  shift, and go to state 73

    control  go to state 74


State 61

   61 expr: SUB num .
   66     | num .

    ','       reduce using rule 61 (expr)
    ','       [reduce using rule 66 (expr)]
    ';'       reduce using rule 61 (expr)
    ';'       [reduce using rule 66 (expr)]
    ')'       reduce using rule 61 (expr)
    ')'       [reduce using rule 66 (expr)]
    ']'       reduce using rule 61 (expr)
    ']'       [reduce using rule 66 (expr)]
    ADD       reduce using rule 61 (expr)
    ADD       [reduce using rule 66 (expr)]
    SUB       reduce using rule 61 (expr)
    SUB       [reduce using rule 66 (expr)]
    MUL       reduce using rule 61 (expr)
    MUL       [reduce using rule 66 (expr)]
    DIV       reduce using rule 61 (expr)
    DIV       [reduce using rule 66 (expr)]
    MOD       reduce using rule 61 (expr)
    MOD       [reduce using rule 66 (expr)]
    ASSIGN    reduce using rule 61 (expr)
    ASSIGN    [reduce using rule 66 (expr)]
    GT        reduce using rule 61 (expr)
    GT        [reduce using rule 66 (expr)]
    GE        reduce using rule 61 (expr)
    GE        [reduce using rule 66 (expr)]
    NE        reduce using rule 61 (expr)
    NE        [reduce using rule 66 (expr)]
    LE        reduce using rule 61 (expr)
    LE        [reduce using rule 66 (expr)]
    LT        reduce using rule 61 (expr)
    LT        [reduce using rule 66 (expr)]
    EQ        reduce using rule 61 (expr)
    EQ        [reduce using rule 66 (expr)]
    AND       reduce using rule 61 (expr)
    AND       [reduce using rule 66 (expr)]
    OR        reduce using rule 61 (expr)
    OR        [reduce using rule 66 (expr)]
    DO        reduce using rule 61 (expr)
    DO        [reduce using rule 66 (expr)]
    THEN      reduce using rule 61 (expr)
    THEN      [reduce using rule 66 (expr)]
    $default  reduce using rule 61 (expr)


State 62

   62 expr: SUB expr .
   64     | expr . control expr

    ADD  shift, and go to state 69
    SUB  shift, and go to state 70
    MUL  shift, and go to state 71
    DIV  shift, and go to state 72
    MOD  shift, and go to state 73

    ADD       [reduce using rule 62 (expr)]
    SUB       [reduce using rule 62 (expr)]
    MUL       [reduce using rule 62 (expr)]
    DIV       [reduce using rule 62 (expr)]
    MOD       [reduce using rule 62 (expr)]
    $default  reduce using rule 62 (expr)

    control  go to state 74


State 63

   63 expr: NOT expr .
   64     | expr . control expr

    ADD  shift, and go to state 69
    SUB  shift, and go to state 70
    MUL  shift, and go to state 71
    DIV  shift, and go to state 72
    MOD  shift, and go to state 73

    ADD       [reduce using rule 63 (expr)]
    SUB       [reduce using rule 63 (expr)]
    MUL       [reduce using rule 63 (expr)]
    DIV       [reduce using rule 63 (expr)]
    MOD       [reduce using rule 63 (expr)]
    $default  reduce using rule 63 (expr)

    control  go to state 74


State 64

   68 expr: ID '(' . expr_f ')'

    '('    shift, and go to state 39
    SUB    shift, and go to state 40
    NOT    shift, and go to state 41
    FALSE  shift, and go to state 42
    TRUE   shift, and go to state 43
    OCT    shift, and go to state 44
    ID     shift, and go to state 59
    INT    shift, and go to state 46
    FLOAT  shift, and go to state 47
    SCI    shift, and go to state 48

    num     go to state 51
    expr    go to state 97
    expr_f  go to state 98


State 65

   72 bracket: '[' . expr ']' bracket

    '('    shift, and go to state 39
    SUB    shift, and go to state 40
    NOT    shift, and go to state 41
    FALSE  shift, and go to state 42
    TRUE   shift, and go to state 43
    OCT    shift, and go to state 44
    ID     shift, and go to state 59
    INT    shift, and go to state 46
    FLOAT  shift, and go to state 47
    SCI    shift, and go to state 48

    num   go to state 51
    expr  go to state 99


State 66

   69 expr: ID bracket .

    $default  reduce using rule 69 (expr)


State 67

   48 func: id_list ':' . scalar_type ';' func
   49     | id_list ':' . scalar_type

    ARRAY    shift, and go to state 24
    BOOLEAN  shift, and go to state 25
    INTEGER  shift, and go to state 27
    REAL     shift, and go to state 28
    STRING   shift, and go to state 35

    scalar_type  go to state 100


State 68

   23 func_d: ID '(' func ')' . ':' scalar_type ';' compound_state END ID
   24 func_p: ID '(' func ')' . ';' compound_state END ID

    ';'  shift, and go to state 101
    ':'  shift, and go to state 102


State 69

   56 control: ADD .

    $default  reduce using rule 56 (control)


State 70

   57 control: SUB .

    $default  reduce using rule 57 (control)


State 71

   58 control: MUL .

    $default  reduce using rule 58 (control)


State 72

   59 control: DIV .

    $default  reduce using rule 59 (control)


State 73

   60 control: MOD .

    $default  reduce using rule 60 (control)


State 74

   64 expr: expr control . expr

    '('    shift, and go to state 39
    SUB    shift, and go to state 40
    NOT    shift, and go to state 41
    FALSE  shift, and go to state 42
    TRUE   shift, and go to state 43
    OCT    shift, and go to state 44
    ID     shift, and go to state 59
    INT    shift, and go to state 46
    FLOAT  shift, and go to state 47
    SCI    shift, and go to state 48

    num   go to state 51
    expr  go to state 103


State 75

   46 for_state: FOR . ID ASSIGN INT TO INT DO state END DO

    ID  shift, and go to state 104


State 76

   43 conditional_state: IF . boolean_expr THEN state END IF
   44                  | IF . boolean_expr THEN state ELSE state END IF

    '('    shift, and go to state 105
    SUB    shift, and go to state 40
    NOT    shift, and go to state 41
    FALSE  shift, and go to state 42
    TRUE   shift, and go to state 43
    OCT    shift, and go to state 44
    ID     shift, and go to state 59
    INT    shift, and go to state 46
    FLOAT  shift, and go to state 47
    SCI    shift, and go to state 48

    num           go to state 51
    expr          go to state 106
    boolean_expr  go to state 107


State 77

   37 simple_state: PRINT . ID ';'
   38             | PRINT . expr ';'
   39             | PRINT . str ';'

    '('    shift, and go to state 39
    SUB    shift, and go to state 40
    NOT    shift, and go to state 41
    FALSE  shift, and go to state 42
    TRUE   shift, and go to state 43
    OCT    shift, and go to state 44
    ID     shift, and go to state 108
    INT    shift, and go to state 46
    FLOAT  shift, and go to state 47
    SCI    shift, and go to state 48
    BS     shift, and go to state 34

    num   go to state 51
    expr  go to state 109
    str   go to state 110


State 78

   40 simple_state: READ . ID ';'
   41             | READ . expr ';'
   42             | READ . str ';'

    '('    shift, and go to state 39
    SUB    shift, and go to state 40
    NOT    shift, and go to state 41
    FALSE  shift, and go to state 42
    TRUE   shift, and go to state 43
    OCT    shift, and go to state 44
    ID     shift, and go to state 111
    INT    shift, and go to state 46
    FLOAT  shift, and go to state 47
    SCI    shift, and go to state 48
    BS     shift, and go to state 34

    num   go to state 51
    expr  go to state 112
    str   go to state 113


State 79

   45 while_state: WHILE . boolean_expr DO state END DO

    '('    shift, and go to state 105
    SUB    shift, and go to state 40
    NOT    shift, and go to state 41
    FALSE  shift, and go to state 42
    TRUE   shift, and go to state 43
    OCT    shift, and go to state 44
    ID     shift, and go to state 59
    INT    shift, and go to state 46
    FLOAT  shift, and go to state 47
    SCI    shift, and go to state 48

    num           go to state 51
    expr          go to state 106
    boolean_expr  go to state 114


State 80

   33 func_invocation: ID . '(' func ')' ';'
   35 simple_state: ID . ASSIGN boolean_expr ';'
   67 expr: ID .
   68     | ID . '(' expr_f ')'
   69     | ID . bracket

    '('     shift, and go to state 115
    '['     shift, and go to state 65
    ASSIGN  shift, and go to state 116

    ADD       reduce using rule 67 (expr)
    ADD       [reduce using rule 73 (bracket)]
    SUB       reduce using rule 67 (expr)
    SUB       [reduce using rule 73 (bracket)]
    MUL       reduce using rule 67 (expr)
    MUL       [reduce using rule 73 (bracket)]
    DIV       reduce using rule 67 (expr)
    DIV       [reduce using rule 73 (bracket)]
    MOD       reduce using rule 67 (expr)
    MOD       [reduce using rule 73 (bracket)]
    ASSIGN    [reduce using rule 67 (expr)]
    ASSIGN    [reduce using rule 73 (bracket)]
    $default  reduce using rule 67 (expr)

    bracket  go to state 66


State 81

   47 return_state: RETURN . boolean_expr ';'

    '('    shift, and go to state 105
    SUB    shift, and go to state 40
    NOT    shift, and go to state 41
    FALSE  shift, and go to state 42
    TRUE   shift, and go to state 43
    OCT    shift, and go to state 44
    ID     shift, and go to state 59
    INT    shift, and go to state 46
    FLOAT  shift, and go to state 47
    SCI    shift, and go to state 48

    num           go to state 51
    expr          go to state 106
    boolean_expr  go to state 117


State 82

   34 compound_state: BEG var_d state . END

    END  shift, and go to state 118


State 83

   31 state: func_invocation . state

    '('     shift, and go to state 39
    SUB     shift, and go to state 40
    NOT     shift, and go to state 41
    BEG     shift, and go to state 19
    FALSE   shift, and go to state 42
    FOR     shift, and go to state 75
    IF      shift, and go to state 76
    PRINT   shift, and go to state 77
    READ    shift, and go to state 78
    TRUE    shift, and go to state 43
    WHILE   shift, and go to state 79
    OCT     shift, and go to state 44
    ID      shift, and go to state 80
    INT     shift, and go to state 46
    FLOAT   shift, and go to state 47
    SCI     shift, and go to state 48
    RETURN  shift, and go to state 81

    $default  reduce using rule 32 (state)

    state              go to state 119
    func_invocation    go to state 83
    compound_state     go to state 84
    simple_state       go to state 85
    conditional_state  go to state 86
    while_state        go to state 87
    for_state          go to state 88
    return_state       go to state 89
    num                go to state 51
    expr               go to state 90


State 84

   25 state: compound_state . state

    '('     shift, and go to state 39
    SUB     shift, and go to state 40
    NOT     shift, and go to state 41
    BEG     shift, and go to state 19
    FALSE   shift, and go to state 42
    FOR     shift, and go to state 75
    IF      shift, and go to state 76
    PRINT   shift, and go to state 77
    READ    shift, and go to state 78
    TRUE    shift, and go to state 43
    WHILE   shift, and go to state 79
    OCT     shift, and go to state 44
    ID      shift, and go to state 80
    INT     shift, and go to state 46
    FLOAT   shift, and go to state 47
    SCI     shift, and go to state 48
    RETURN  shift, and go to state 81

    $default  reduce using rule 32 (state)

    state              go to state 120
    func_invocation    go to state 83
    compound_state     go to state 84
    simple_state       go to state 85
    conditional_state  go to state 86
    while_state        go to state 87
    for_state          go to state 88
    return_state       go to state 89
    num                go to state 51
    expr               go to state 90


State 85

   26 state: simple_state . state

    '('     shift, and go to state 39
    SUB     shift, and go to state 40
    NOT     shift, and go to state 41
    BEG     shift, and go to state 19
    FALSE   shift, and go to state 42
    FOR     shift, and go to state 75
    IF      shift, and go to state 76
    PRINT   shift, and go to state 77
    READ    shift, and go to state 78
    TRUE    shift, and go to state 43
    WHILE   shift, and go to state 79
    OCT     shift, and go to state 44
    ID      shift, and go to state 80
    INT     shift, and go to state 46
    FLOAT   shift, and go to state 47
    SCI     shift, and go to state 48
    RETURN  shift, and go to state 81

    $default  reduce using rule 32 (state)

    state              go to state 121
    func_invocation    go to state 83
    compound_state     go to state 84
    simple_state       go to state 85
    conditional_state  go to state 86
    while_state        go to state 87
    for_state          go to state 88
    return_state       go to state 89
    num                go to state 51
    expr               go to state 90


State 86

   27 state: conditional_state . state

    '('     shift, and go to state 39
    SUB     shift, and go to state 40
    NOT     shift, and go to state 41
    BEG     shift, and go to state 19
    FALSE   shift, and go to state 42
    FOR     shift, and go to state 75
    IF      shift, and go to state 76
    PRINT   shift, and go to state 77
    READ    shift, and go to state 78
    TRUE    shift, and go to state 43
    WHILE   shift, and go to state 79
    OCT     shift, and go to state 44
    ID      shift, and go to state 80
    INT     shift, and go to state 46
    FLOAT   shift, and go to state 47
    SCI     shift, and go to state 48
    RETURN  shift, and go to state 81

    $default  reduce using rule 32 (state)

    state              go to state 122
    func_invocation    go to state 83
    compound_state     go to state 84
    simple_state       go to state 85
    conditional_state  go to state 86
    while_state        go to state 87
    for_state          go to state 88
    return_state       go to state 89
    num                go to state 51
    expr               go to state 90


State 87

   28 state: while_state . state

    '('     shift, and go to state 39
    SUB     shift, and go to state 40
    NOT     shift, and go to state 41
    BEG     shift, and go to state 19
    FALSE   shift, and go to state 42
    FOR     shift, and go to state 75
    IF      shift, and go to state 76
    PRINT   shift, and go to state 77
    READ    shift, and go to state 78
    TRUE    shift, and go to state 43
    WHILE   shift, and go to state 79
    OCT     shift, and go to state 44
    ID      shift, and go to state 80
    INT     shift, and go to state 46
    FLOAT   shift, and go to state 47
    SCI     shift, and go to state 48
    RETURN  shift, and go to state 81

    $default  reduce using rule 32 (state)

    state              go to state 123
    func_invocation    go to state 83
    compound_state     go to state 84
    simple_state       go to state 85
    conditional_state  go to state 86
    while_state        go to state 87
    for_state          go to state 88
    return_state       go to state 89
    num                go to state 51
    expr               go to state 90


State 88

   29 state: for_state . state

    '('     shift, and go to state 39
    SUB     shift, and go to state 40
    NOT     shift, and go to state 41
    BEG     shift, and go to state 19
    FALSE   shift, and go to state 42
    FOR     shift, and go to state 75
    IF      shift, and go to state 76
    PRINT   shift, and go to state 77
    READ    shift, and go to state 78
    TRUE    shift, and go to state 43
    WHILE   shift, and go to state 79
    OCT     shift, and go to state 44
    ID      shift, and go to state 80
    INT     shift, and go to state 46
    FLOAT   shift, and go to state 47
    SCI     shift, and go to state 48
    RETURN  shift, and go to state 81

    $default  reduce using rule 32 (state)

    state              go to state 124
    func_invocation    go to state 83
    compound_state     go to state 84
    simple_state       go to state 85
    conditional_state  go to state 86
    while_state        go to state 87
    for_state          go to state 88
    return_state       go to state 89
    num                go to state 51
    expr               go to state 90


State 89

   30 state: return_state . state

    '('     shift, and go to state 39
    SUB     shift, and go to state 40
    NOT     shift, and go to state 41
    BEG     shift, and go to state 19
    FALSE   shift, and go to state 42
    FOR     shift, and go to state 75
    IF      shift, and go to state 76
    PRINT   shift, and go to state 77
    READ    shift, and go to state 78
    TRUE    shift, and go to state 43
    WHILE   shift, and go to state 79
    OCT     shift, and go to state 44
    ID      shift, and go to state 80
    INT     shift, and go to state 46
    FLOAT   shift, and go to state 47
    SCI     shift, and go to state 48
    RETURN  shift, and go to state 81

    $default  reduce using rule 32 (state)

    state              go to state 125
    func_invocation    go to state 83
    compound_state     go to state 84
    simple_state       go to state 85
    conditional_state  go to state 86
    while_state        go to state 87
    for_state          go to state 88
    return_state       go to state 89
    num                go to state 51
    expr               go to state 90


State 90

   36 simple_state: expr . ASSIGN boolean_expr ';'
   64 expr: expr . control expr

    ADD     shift, and go to state 69
    SUB     shift, and go to state 70
    MUL     shift, and go to state 71
    DIV     shift, and go to state 72
    MOD     shift, and go to state 73
    ASSIGN  shift, and go to state 126

    control  go to state 74


State 91

   12 scalar_type: ARRAY INT TO . INT OF scalar_type

    INT  shift, and go to state 127


State 92

   96 str_c: BSS str_c .

    $default  reduce using rule 96 (str_c)


State 93

   95 str: BS str_c BSSS .

    $default  reduce using rule 95 (str)


State 94

    3 var_d: VAR id_list ':' scalar_type ';' var_d .

    $default  reduce using rule 3 (var_d)


State 95

    4 var_d: VAR id_list ':' literal_constant ';' var_d .

    $default  reduce using rule 4 (var_d)


State 96

   65 expr: '(' expr ')' .

    $default  reduce using rule 65 (expr)


State 97

   64 expr: expr . control expr
   74 expr_f: expr . ',' expr_f
   75       | expr .

    ','  shift, and go to state 128
    ADD  shift, and go to state 69
    SUB  shift, and go to state 70
    MUL  shift, and go to state 71
    DIV  shift, and go to state 72
    MOD  shift, and go to state 73

    $default  reduce using rule 75 (expr_f)

    control  go to state 74


State 98

   68 expr: ID '(' expr_f . ')'

    ')'  shift, and go to state 129


State 99

   64 expr: expr . control expr
   72 bracket: '[' expr . ']' bracket

    ']'  shift, and go to state 130
    ADD  shift, and go to state 69
    SUB  shift, and go to state 70
    MUL  shift, and go to state 71
    DIV  shift, and go to state 72
    MOD  shift, and go to state 73

    control  go to state 74


State 100

   48 func: id_list ':' scalar_type . ';' func
   49     | id_list ':' scalar_type .

    ';'  shift, and go to state 131

    $default  reduce using rule 49 (func)


State 101

   24 func_p: ID '(' func ')' ';' . compound_state END ID

    BEG  shift, and go to state 19

    compound_state  go to state 132


State 102

   23 func_d: ID '(' func ')' ':' . scalar_type ';' compound_state END ID

    ARRAY    shift, and go to state 24
    BOOLEAN  shift, and go to state 25
    INTEGER  shift, and go to state 27
    REAL     shift, and go to state 28
    STRING   shift, and go to state 35

    scalar_type  go to state 133


State 103

   64 expr: expr . control expr
   64     | expr control expr .

    ADD  shift, and go to state 69
    SUB  shift, and go to state 70
    MUL  shift, and go to state 71
    DIV  shift, and go to state 72
    MOD  shift, and go to state 73

    ADD       [reduce using rule 64 (expr)]
    SUB       [reduce using rule 64 (expr)]
    MUL       [reduce using rule 64 (expr)]
    DIV       [reduce using rule 64 (expr)]
    MOD       [reduce using rule 64 (expr)]
    $default  reduce using rule 64 (expr)

    control  go to state 74


State 104

   46 for_state: FOR ID . ASSIGN INT TO INT DO state END DO

    ASSIGN  shift, and go to state 134


State 105

   65 expr: '(' . expr ')'
   76 boolean_expr: '(' . boolean_expr ')'

    '('    shift, and go to state 105
    SUB    shift, and go to state 40
    NOT    shift, and go to state 41
    FALSE  shift, and go to state 42
    TRUE   shift, and go to state 43
    OCT    shift, and go to state 44
    ID     shift, and go to state 59
    INT    shift, and go to state 46
    FLOAT  shift, and go to state 47
    SCI    shift, and go to state 48

    num           go to state 51
    expr          go to state 135
    boolean_expr  go to state 136


State 106

   64 expr: expr . control expr
   77 boolean_expr: expr . GT expr boolean_expr2
   78             | expr . LT expr boolean_expr2
   79             | expr . EQ expr boolean_expr2
   80             | expr . GE expr boolean_expr2
   81             | expr . LE expr boolean_expr2
   82             | expr . NE expr boolean_expr2
   83             | expr . AND expr boolean_expr2
   84             | expr . OR expr boolean_expr2
   85             | expr .

    ADD  shift, and go to state 69
    SUB  shift, and go to state 70
    MUL  shift, and go to state 71
    DIV  shift, and go to state 72
    MOD  shift, and go to state 73
    GT   shift, and go to state 137
    GE   shift, and go to state 138
    NE   shift, and go to state 139
    LE   shift, and go to state 140
    LT   shift, and go to state 141
    EQ   shift, and go to state 142
    AND  shift, and go to state 143
    OR   shift, and go to state 144

    $default  reduce using rule 85 (boolean_expr)

    control  go to state 74


State 107

   43 conditional_state: IF boolean_expr . THEN state END IF
   44                  | IF boolean_expr . THEN state ELSE state END IF

    THEN  shift, and go to state 145


State 108

   37 simple_state: PRINT ID . ';'
   67 expr: ID .
   68     | ID . '(' expr_f ')'
   69     | ID . bracket

    ';'  shift, and go to state 146
    '('  shift, and go to state 64
    '['  shift, and go to state 65

    ';'       [reduce using rule 67 (expr)]
    ';'       [reduce using rule 73 (bracket)]
    ADD       reduce using rule 67 (expr)
    ADD       [reduce using rule 73 (bracket)]
    SUB       reduce using rule 67 (expr)
    SUB       [reduce using rule 73 (bracket)]
    MUL       reduce using rule 67 (expr)
    MUL       [reduce using rule 73 (bracket)]
    DIV       reduce using rule 67 (expr)
    DIV       [reduce using rule 73 (bracket)]
    MOD       reduce using rule 67 (expr)
    MOD       [reduce using rule 73 (bracket)]
    $default  reduce using rule 67 (expr)

    bracket  go to state 66


State 109

   38 simple_state: PRINT expr . ';'
   64 expr: expr . control expr

    ';'  shift, and go to state 147
    ADD  shift, and go to state 69
    SUB  shift, and go to state 70
    MUL  shift, and go to state 71
    DIV  shift, and go to state 72
    MOD  shift, and go to state 73

    control  go to state 74


State 110

   39 simple_state: PRINT str . ';'

    ';'  shift, and go to state 148


State 111

   40 simple_state: READ ID . ';'
   67 expr: ID .
   68     | ID . '(' expr_f ')'
   69     | ID . bracket

    ';'  shift, and go to state 149
    '('  shift, and go to state 64
    '['  shift, and go to state 65

    ';'       [reduce using rule 67 (expr)]
    ';'       [reduce using rule 73 (bracket)]
    ADD       reduce using rule 67 (expr)
    ADD       [reduce using rule 73 (bracket)]
    SUB       reduce using rule 67 (expr)
    SUB       [reduce using rule 73 (bracket)]
    MUL       reduce using rule 67 (expr)
    MUL       [reduce using rule 73 (bracket)]
    DIV       reduce using rule 67 (expr)
    DIV       [reduce using rule 73 (bracket)]
    MOD       reduce using rule 67 (expr)
    MOD       [reduce using rule 73 (bracket)]
    $default  reduce using rule 67 (expr)

    bracket  go to state 66


State 112

   41 simple_state: READ expr . ';'
   64 expr: expr . control expr

    ';'  shift, and go to state 150
    ADD  shift, and go to state 69
    SUB  shift, and go to state 70
    MUL  shift, and go to state 71
    DIV  shift, and go to state 72
    MOD  shift, and go to state 73

    control  go to state 74


State 113

   42 simple_state: READ str . ';'

    ';'  shift, and go to state 151


State 114

   45 while_state: WHILE boolean_expr . DO state END DO

    DO  shift, and go to state 152


State 115

   33 func_invocation: ID '(' . func ')' ';'
   68 expr: ID '(' . expr_f ')'

    '('    shift, and go to state 39
    SUB    shift, and go to state 40
    NOT    shift, and go to state 41
    FALSE  shift, and go to state 42
    TRUE   shift, and go to state 43
    OCT    shift, and go to state 44
    ID     shift, and go to state 45
    INT    shift, and go to state 46
    FLOAT  shift, and go to state 47
    SCI    shift, and go to state 48

    $default  reduce using rule 51 (func)

    id_list  go to state 49
    func     go to state 153
    num      go to state 51
    expr     go to state 154
    expr_f   go to state 98


State 116

   35 simple_state: ID ASSIGN . boolean_expr ';'

    '('    shift, and go to state 105
    SUB    shift, and go to state 40
    NOT    shift, and go to state 41
    FALSE  shift, and go to state 42
    TRUE   shift, and go to state 43
    OCT    shift, and go to state 44
    ID     shift, and go to state 59
    INT    shift, and go to state 46
    FLOAT  shift, and go to state 47
    SCI    shift, and go to state 48

    num           go to state 51
    expr          go to state 106
    boolean_expr  go to state 155


State 117

   47 return_state: RETURN boolean_expr . ';'

    ';'  shift, and go to state 156


State 118

   34 compound_state: BEG var_d state END .

    $default  reduce using rule 34 (compound_state)


State 119

   31 state: func_invocation state .

    $default  reduce using rule 31 (state)


State 120

   25 state: compound_state state .

    $default  reduce using rule 25 (state)


State 121

   26 state: simple_state state .

    $default  reduce using rule 26 (state)


State 122

   27 state: conditional_state state .

    $default  reduce using rule 27 (state)


State 123

   28 state: while_state state .

    $default  reduce using rule 28 (state)


State 124

   29 state: for_state state .

    $default  reduce using rule 29 (state)


State 125

   30 state: return_state state .

    $default  reduce using rule 30 (state)


State 126

   36 simple_state: expr ASSIGN . boolean_expr ';'

    '('    shift, and go to state 105
    SUB    shift, and go to state 40
    NOT    shift, and go to state 41
    FALSE  shift, and go to state 42
    TRUE   shift, and go to state 43
    OCT    shift, and go to state 44
    ID     shift, and go to state 59
    INT    shift, and go to state 46
    FLOAT  shift, and go to state 47
    SCI    shift, and go to state 48

    num           go to state 51
    expr          go to state 106
    boolean_expr  go to state 157


State 127

   12 scalar_type: ARRAY INT TO INT . OF scalar_type

    OF  shift, and go to state 158


State 128

   74 expr_f: expr ',' . expr_f

    '('    shift, and go to state 39
    SUB    shift, and go to state 40
    NOT    shift, and go to state 41
    FALSE  shift, and go to state 42
    TRUE   shift, and go to state 43
    OCT    shift, and go to state 44
    ID     shift, and go to state 59
    INT    shift, and go to state 46
    FLOAT  shift, and go to state 47
    SCI    shift, and go to state 48

    num     go to state 51
    expr    go to state 97
    expr_f  go to state 159


State 129

   68 expr: ID '(' expr_f ')' .

    $default  reduce using rule 68 (expr)


State 130

   72 bracket: '[' expr ']' . bracket

    '['  shift, and go to state 65

    $default  reduce using rule 73 (bracket)

    bracket  go to state 160


State 131

   48 func: id_list ':' scalar_type ';' . func

    '('    shift, and go to state 39
    SUB    shift, and go to state 40
    NOT    shift, and go to state 41
    FALSE  shift, and go to state 42
    TRUE   shift, and go to state 43
    OCT    shift, and go to state 44
    ID     shift, and go to state 45
    INT    shift, and go to state 46
    FLOAT  shift, and go to state 47
    SCI    shift, and go to state 48

    $default  reduce using rule 51 (func)

    id_list  go to state 49
    func     go to state 161
    num      go to state 51
    expr     go to state 52


State 132

   24 func_p: ID '(' func ')' ';' compound_state . END ID

    END  shift, and go to state 162


State 133

   23 func_d: ID '(' func ')' ':' scalar_type . ';' compound_state END ID

    ';'  shift, and go to state 163


State 134

   46 for_state: FOR ID ASSIGN . INT TO INT DO state END DO

    INT  shift, and go to state 164


State 135

   64 expr: expr . control expr
   65     | '(' expr . ')'
   77 boolean_expr: expr . GT expr boolean_expr2
   78             | expr . LT expr boolean_expr2
   79             | expr . EQ expr boolean_expr2
   80             | expr . GE expr boolean_expr2
   81             | expr . LE expr boolean_expr2
   82             | expr . NE expr boolean_expr2
   83             | expr . AND expr boolean_expr2
   84             | expr . OR expr boolean_expr2
   85             | expr .

    ')'  shift, and go to state 96
    ADD  shift, and go to state 69
    SUB  shift, and go to state 70
    MUL  shift, and go to state 71
    DIV  shift, and go to state 72
    MOD  shift, and go to state 73
    GT   shift, and go to state 137
    GE   shift, and go to state 138
    NE   shift, and go to state 139
    LE   shift, and go to state 140
    LT   shift, and go to state 141
    EQ   shift, and go to state 142
    AND  shift, and go to state 143
    OR   shift, and go to state 144

    ')'  [reduce using rule 85 (boolean_expr)]

    control  go to state 74


State 136

   76 boolean_expr: '(' boolean_expr . ')'

    ')'  shift, and go to state 165


State 137

   77 boolean_expr: expr GT . expr boolean_expr2

    '('    shift, and go to state 39
    SUB    shift, and go to state 40
    NOT    shift, and go to state 41
    FALSE  shift, and go to state 42
    TRUE   shift, and go to state 43
    OCT    shift, and go to state 44
    ID     shift, and go to state 59
    INT    shift, and go to state 46
    FLOAT  shift, and go to state 47
    SCI    shift, and go to state 48

    num   go to state 51
    expr  go to state 166


State 138

   80 boolean_expr: expr GE . expr boolean_expr2

    '('    shift, and go to state 39
    SUB    shift, and go to state 40
    NOT    shift, and go to state 41
    FALSE  shift, and go to state 42
    TRUE   shift, and go to state 43
    OCT    shift, and go to state 44
    ID     shift, and go to state 59
    INT    shift, and go to state 46
    FLOAT  shift, and go to state 47
    SCI    shift, and go to state 48

    num   go to state 51
    expr  go to state 167


State 139

   82 boolean_expr: expr NE . expr boolean_expr2

    '('    shift, and go to state 39
    SUB    shift, and go to state 40
    NOT    shift, and go to state 41
    FALSE  shift, and go to state 42
    TRUE   shift, and go to state 43
    OCT    shift, and go to state 44
    ID     shift, and go to state 59
    INT    shift, and go to state 46
    FLOAT  shift, and go to state 47
    SCI    shift, and go to state 48

    num   go to state 51
    expr  go to state 168


State 140

   81 boolean_expr: expr LE . expr boolean_expr2

    '('    shift, and go to state 39
    SUB    shift, and go to state 40
    NOT    shift, and go to state 41
    FALSE  shift, and go to state 42
    TRUE   shift, and go to state 43
    OCT    shift, and go to state 44
    ID     shift, and go to state 59
    INT    shift, and go to state 46
    FLOAT  shift, and go to state 47
    SCI    shift, and go to state 48

    num   go to state 51
    expr  go to state 169


State 141

   78 boolean_expr: expr LT . expr boolean_expr2

    '('    shift, and go to state 39
    SUB    shift, and go to state 40
    NOT    shift, and go to state 41
    FALSE  shift, and go to state 42
    TRUE   shift, and go to state 43
    OCT    shift, and go to state 44
    ID     shift, and go to state 59
    INT    shift, and go to state 46
    FLOAT  shift, and go to state 47
    SCI    shift, and go to state 48

    num   go to state 51
    expr  go to state 170


State 142

   79 boolean_expr: expr EQ . expr boolean_expr2

    '('    shift, and go to state 39
    SUB    shift, and go to state 40
    NOT    shift, and go to state 41
    FALSE  shift, and go to state 42
    TRUE   shift, and go to state 43
    OCT    shift, and go to state 44
    ID     shift, and go to state 59
    INT    shift, and go to state 46
    FLOAT  shift, and go to state 47
    SCI    shift, and go to state 48

    num   go to state 51
    expr  go to state 171


State 143

   83 boolean_expr: expr AND . expr boolean_expr2

    '('    shift, and go to state 39
    SUB    shift, and go to state 40
    NOT    shift, and go to state 41
    FALSE  shift, and go to state 42
    TRUE   shift, and go to state 43
    OCT    shift, and go to state 44
    ID     shift, and go to state 59
    INT    shift, and go to state 46
    FLOAT  shift, and go to state 47
    SCI    shift, and go to state 48

    num   go to state 51
    expr  go to state 172


State 144

   84 boolean_expr: expr OR . expr boolean_expr2

    '('    shift, and go to state 39
    SUB    shift, and go to state 40
    NOT    shift, and go to state 41
    FALSE  shift, and go to state 42
    TRUE   shift, and go to state 43
    OCT    shift, and go to state 44
    ID     shift, and go to state 59
    INT    shift, and go to state 46
    FLOAT  shift, and go to state 47
    SCI    shift, and go to state 48

    num   go to state 51
    expr  go to state 173


State 145

   43 conditional_state: IF boolean_expr THEN . state END IF
   44                  | IF boolean_expr THEN . state ELSE state END IF

    '('     shift, and go to state 39
    SUB     shift, and go to state 40
    NOT     shift, and go to state 41
    BEG     shift, and go to state 19
    FALSE   shift, and go to state 42
    FOR     shift, and go to state 75
    IF      shift, and go to state 76
    PRINT   shift, and go to state 77
    READ    shift, and go to state 78
    TRUE    shift, and go to state 43
    WHILE   shift, and go to state 79
    OCT     shift, and go to state 44
    ID      shift, and go to state 80
    INT     shift, and go to state 46
    FLOAT   shift, and go to state 47
    SCI     shift, and go to state 48
    RETURN  shift, and go to state 81

    $default  reduce using rule 32 (state)

    state              go to state 174
    func_invocation    go to state 83
    compound_state     go to state 84
    simple_state       go to state 85
    conditional_state  go to state 86
    while_state        go to state 87
    for_state          go to state 88
    return_state       go to state 89
    num                go to state 51
    expr               go to state 90


State 146

   37 simple_state: PRINT ID ';' .

    $default  reduce using rule 37 (simple_state)


State 147

   38 simple_state: PRINT expr ';' .

    $default  reduce using rule 38 (simple_state)


State 148

   39 simple_state: PRINT str ';' .

    $default  reduce using rule 39 (simple_state)


State 149

   40 simple_state: READ ID ';' .

    $default  reduce using rule 40 (simple_state)


State 150

   41 simple_state: READ expr ';' .

    $default  reduce using rule 41 (simple_state)


State 151

   42 simple_state: READ str ';' .

    $default  reduce using rule 42 (simple_state)


State 152

   45 while_state: WHILE boolean_expr DO . state END DO

    '('     shift, and go to state 39
    SUB     shift, and go to state 40
    NOT     shift, and go to state 41
    BEG     shift, and go to state 19
    FALSE   shift, and go to state 42
    FOR     shift, and go to state 75
    IF      shift, and go to state 76
    PRINT   shift, and go to state 77
    READ    shift, and go to state 78
    TRUE    shift, and go to state 43
    WHILE   shift, and go to state 79
    OCT     shift, and go to state 44
    ID      shift, and go to state 80
    INT     shift, and go to state 46
    FLOAT   shift, and go to state 47
    SCI     shift, and go to state 48
    RETURN  shift, and go to state 81

    $default  reduce using rule 32 (state)

    state              go to state 175
    func_invocation    go to state 83
    compound_state     go to state 84
    simple_state       go to state 85
    conditional_state  go to state 86
    while_state        go to state 87
    for_state          go to state 88
    return_state       go to state 89
    num                go to state 51
    expr               go to state 90


State 153

   33 func_invocation: ID '(' func . ')' ';'

    ')'  shift, and go to state 176


State 154

   50 func: expr .
   64 expr: expr . control expr
   74 expr_f: expr . ',' expr_f
   75       | expr .

    ','  shift, and go to state 128
    ADD  shift, and go to state 69
    SUB  shift, and go to state 70
    MUL  shift, and go to state 71
    DIV  shift, and go to state 72
    MOD  shift, and go to state 73

    ')'       reduce using rule 50 (func)
    ')'       [reduce using rule 75 (expr_f)]
    $default  reduce using rule 50 (func)

    control  go to state 74


State 155

   35 simple_state: ID ASSIGN boolean_expr . ';'

    ';'  shift, and go to state 177


State 156

   47 return_state: RETURN boolean_expr ';' .

    $default  reduce using rule 47 (return_state)


State 157

   36 simple_state: expr ASSIGN boolean_expr . ';'

    ';'  shift, and go to state 178


State 158

   12 scalar_type: ARRAY INT TO INT OF . scalar_type

    ARRAY    shift, and go to state 24
    BOOLEAN  shift, and go to state 25
    INTEGER  shift, and go to state 27
    REAL     shift, and go to state 28
    STRING   shift, and go to state 35

    scalar_type  go to state 179


State 159

   74 expr_f: expr ',' expr_f .

    $default  reduce using rule 74 (expr_f)


State 160

   72 bracket: '[' expr ']' bracket .

    $default  reduce using rule 72 (bracket)


State 161

   48 func: id_list ':' scalar_type ';' func .

    $default  reduce using rule 48 (func)


State 162

   24 func_p: ID '(' func ')' ';' compound_state END . ID

    ID  shift, and go to state 180


State 163

   23 func_d: ID '(' func ')' ':' scalar_type ';' . compound_state END ID

    BEG  shift, and go to state 19

    compound_state  go to state 181


State 164

   46 for_state: FOR ID ASSIGN INT . TO INT DO state END DO

    TO  shift, and go to state 182


State 165

   76 boolean_expr: '(' boolean_expr ')' .

    $default  reduce using rule 76 (boolean_expr)


State 166

   64 expr: expr . control expr
   77 boolean_expr: expr GT expr . boolean_expr2

    ADD  shift, and go to state 69
    SUB  shift, and go to state 70
    MUL  shift, and go to state 71
    DIV  shift, and go to state 72
    MOD  shift, and go to state 73
    GT   shift, and go to state 183
    GE   shift, and go to state 184
    NE   shift, and go to state 185
    LE   shift, and go to state 186
    LT   shift, and go to state 187
    EQ   shift, and go to state 188
    AND  shift, and go to state 189
    OR   shift, and go to state 190

    $default  reduce using rule 94 (boolean_expr2)

    control        go to state 74
    boolean_expr2  go to state 191


State 167

   64 expr: expr . control expr
   80 boolean_expr: expr GE expr . boolean_expr2

    ADD  shift, and go to state 69
    SUB  shift, and go to state 70
    MUL  shift, and go to state 71
    DIV  shift, and go to state 72
    MOD  shift, and go to state 73
    GT   shift, and go to state 183
    GE   shift, and go to state 184
    NE   shift, and go to state 185
    LE   shift, and go to state 186
    LT   shift, and go to state 187
    EQ   shift, and go to state 188
    AND  shift, and go to state 189
    OR   shift, and go to state 190

    $default  reduce using rule 94 (boolean_expr2)

    control        go to state 74
    boolean_expr2  go to state 192


State 168

   64 expr: expr . control expr
   82 boolean_expr: expr NE expr . boolean_expr2

    ADD  shift, and go to state 69
    SUB  shift, and go to state 70
    MUL  shift, and go to state 71
    DIV  shift, and go to state 72
    MOD  shift, and go to state 73
    GT   shift, and go to state 183
    GE   shift, and go to state 184
    NE   shift, and go to state 185
    LE   shift, and go to state 186
    LT   shift, and go to state 187
    EQ   shift, and go to state 188
    AND  shift, and go to state 189
    OR   shift, and go to state 190

    $default  reduce using rule 94 (boolean_expr2)

    control        go to state 74
    boolean_expr2  go to state 193


State 169

   64 expr: expr . control expr
   81 boolean_expr: expr LE expr . boolean_expr2

    ADD  shift, and go to state 69
    SUB  shift, and go to state 70
    MUL  shift, and go to state 71
    DIV  shift, and go to state 72
    MOD  shift, and go to state 73
    GT   shift, and go to state 183
    GE   shift, and go to state 184
    NE   shift, and go to state 185
    LE   shift, and go to state 186
    LT   shift, and go to state 187
    EQ   shift, and go to state 188
    AND  shift, and go to state 189
    OR   shift, and go to state 190

    $default  reduce using rule 94 (boolean_expr2)

    control        go to state 74
    boolean_expr2  go to state 194


State 170

   64 expr: expr . control expr
   78 boolean_expr: expr LT expr . boolean_expr2

    ADD  shift, and go to state 69
    SUB  shift, and go to state 70
    MUL  shift, and go to state 71
    DIV  shift, and go to state 72
    MOD  shift, and go to state 73
    GT   shift, and go to state 183
    GE   shift, and go to state 184
    NE   shift, and go to state 185
    LE   shift, and go to state 186
    LT   shift, and go to state 187
    EQ   shift, and go to state 188
    AND  shift, and go to state 189
    OR   shift, and go to state 190

    $default  reduce using rule 94 (boolean_expr2)

    control        go to state 74
    boolean_expr2  go to state 195


State 171

   64 expr: expr . control expr
   79 boolean_expr: expr EQ expr . boolean_expr2

    ADD  shift, and go to state 69
    SUB  shift, and go to state 70
    MUL  shift, and go to state 71
    DIV  shift, and go to state 72
    MOD  shift, and go to state 73
    GT   shift, and go to state 183
    GE   shift, and go to state 184
    NE   shift, and go to state 185
    LE   shift, and go to state 186
    LT   shift, and go to state 187
    EQ   shift, and go to state 188
    AND  shift, and go to state 189
    OR   shift, and go to state 190

    $default  reduce using rule 94 (boolean_expr2)

    control        go to state 74
    boolean_expr2  go to state 196


State 172

   64 expr: expr . control expr
   83 boolean_expr: expr AND expr . boolean_expr2

    ADD  shift, and go to state 69
    SUB  shift, and go to state 70
    MUL  shift, and go to state 71
    DIV  shift, and go to state 72
    MOD  shift, and go to state 73
    GT   shift, and go to state 183
    GE   shift, and go to state 184
    NE   shift, and go to state 185
    LE   shift, and go to state 186
    LT   shift, and go to state 187
    EQ   shift, and go to state 188
    AND  shift, and go to state 189
    OR   shift, and go to state 190

    $default  reduce using rule 94 (boolean_expr2)

    control        go to state 74
    boolean_expr2  go to state 197


State 173

   64 expr: expr . control expr
   84 boolean_expr: expr OR expr . boolean_expr2

    ADD  shift, and go to state 69
    SUB  shift, and go to state 70
    MUL  shift, and go to state 71
    DIV  shift, and go to state 72
    MOD  shift, and go to state 73
    GT   shift, and go to state 183
    GE   shift, and go to state 184
    NE   shift, and go to state 185
    LE   shift, and go to state 186
    LT   shift, and go to state 187
    EQ   shift, and go to state 188
    AND  shift, and go to state 189
    OR   shift, and go to state 190

    $default  reduce using rule 94 (boolean_expr2)

    control        go to state 74
    boolean_expr2  go to state 198


State 174

   43 conditional_state: IF boolean_expr THEN state . END IF
   44                  | IF boolean_expr THEN state . ELSE state END IF

    ELSE  shift, and go to state 199
    END   shift, and go to state 200


State 175

   45 while_state: WHILE boolean_expr DO state . END DO

    END  shift, and go to state 201


State 176

   33 func_invocation: ID '(' func ')' . ';'

    ';'  shift, and go to state 202


State 177

   35 simple_state: ID ASSIGN boolean_expr ';' .

    $default  reduce using rule 35 (simple_state)


State 178

   36 simple_state: expr ASSIGN boolean_expr ';' .

    $default  reduce using rule 36 (simple_state)


State 179

   12 scalar_type: ARRAY INT TO INT OF scalar_type .

    $default  reduce using rule 12 (scalar_type)


State 180

   24 func_p: ID '(' func ')' ';' compound_state END ID .

    $default  reduce using rule 24 (func_p)


State 181

   23 func_d: ID '(' func ')' ':' scalar_type ';' compound_state . END ID

    END  shift, and go to state 203


State 182

   46 for_state: FOR ID ASSIGN INT TO . INT DO state END DO

    INT  shift, and go to state 204


State 183

   86 boolean_expr2: GT . expr boolean_expr2

    '('    shift, and go to state 39
    SUB    shift, and go to state 40
    NOT    shift, and go to state 41
    FALSE  shift, and go to state 42
    TRUE   shift, and go to state 43
    OCT    shift, and go to state 44
    ID     shift, and go to state 59
    INT    shift, and go to state 46
    FLOAT  shift, and go to state 47
    SCI    shift, and go to state 48

    num   go to state 51
    expr  go to state 205


State 184

   89 boolean_expr2: GE . expr boolean_expr2

    '('    shift, and go to state 39
    SUB    shift, and go to state 40
    NOT    shift, and go to state 41
    FALSE  shift, and go to state 42
    TRUE   shift, and go to state 43
    OCT    shift, and go to state 44
    ID     shift, and go to state 59
    INT    shift, and go to state 46
    FLOAT  shift, and go to state 47
    SCI    shift, and go to state 48

    num   go to state 51
    expr  go to state 206


State 185

   91 boolean_expr2: NE . expr boolean_expr2

    '('    shift, and go to state 39
    SUB    shift, and go to state 40
    NOT    shift, and go to state 41
    FALSE  shift, and go to state 42
    TRUE   shift, and go to state 43
    OCT    shift, and go to state 44
    ID     shift, and go to state 59
    INT    shift, and go to state 46
    FLOAT  shift, and go to state 47
    SCI    shift, and go to state 48

    num   go to state 51
    expr  go to state 207


State 186

   90 boolean_expr2: LE . expr boolean_expr2

    '('    shift, and go to state 39
    SUB    shift, and go to state 40
    NOT    shift, and go to state 41
    FALSE  shift, and go to state 42
    TRUE   shift, and go to state 43
    OCT    shift, and go to state 44
    ID     shift, and go to state 59
    INT    shift, and go to state 46
    FLOAT  shift, and go to state 47
    SCI    shift, and go to state 48

    num   go to state 51
    expr  go to state 208


State 187

   87 boolean_expr2: LT . expr boolean_expr2

    '('    shift, and go to state 39
    SUB    shift, and go to state 40
    NOT    shift, and go to state 41
    FALSE  shift, and go to state 42
    TRUE   shift, and go to state 43
    OCT    shift, and go to state 44
    ID     shift, and go to state 59
    INT    shift, and go to state 46
    FLOAT  shift, and go to state 47
    SCI    shift, and go to state 48

    num   go to state 51
    expr  go to state 209


State 188

   88 boolean_expr2: EQ . expr boolean_expr2

    '('    shift, and go to state 39
    SUB    shift, and go to state 40
    NOT    shift, and go to state 41
    FALSE  shift, and go to state 42
    TRUE   shift, and go to state 43
    OCT    shift, and go to state 44
    ID     shift, and go to state 59
    INT    shift, and go to state 46
    FLOAT  shift, and go to state 47
    SCI    shift, and go to state 48

    num   go to state 51
    expr  go to state 210


State 189

   92 boolean_expr2: AND . expr boolean_expr2

    '('    shift, and go to state 39
    SUB    shift, and go to state 40
    NOT    shift, and go to state 41
    FALSE  shift, and go to state 42
    TRUE   shift, and go to state 43
    OCT    shift, and go to state 44
    ID     shift, and go to state 59
    INT    shift, and go to state 46
    FLOAT  shift, and go to state 47
    SCI    shift, and go to state 48

    num   go to state 51
    expr  go to state 211


State 190

   93 boolean_expr2: OR . expr boolean_expr2

    '('    shift, and go to state 39
    SUB    shift, and go to state 40
    NOT    shift, and go to state 41
    FALSE  shift, and go to state 42
    TRUE   shift, and go to state 43
    OCT    shift, and go to state 44
    ID     shift, and go to state 59
    INT    shift, and go to state 46
    FLOAT  shift, and go to state 47
    SCI    shift, and go to state 48

    num   go to state 51
    expr  go to state 212


State 191

   77 boolean_expr: expr GT expr boolean_expr2 .

    $default  reduce using rule 77 (boolean_expr)


State 192

   80 boolean_expr: expr GE expr boolean_expr2 .

    $default  reduce using rule 80 (boolean_expr)


State 193

   82 boolean_expr: expr NE expr boolean_expr2 .

    $default  reduce using rule 82 (boolean_expr)


State 194

   81 boolean_expr: expr LE expr boolean_expr2 .

    $default  reduce using rule 81 (boolean_expr)


State 195

   78 boolean_expr: expr LT expr boolean_expr2 .

    $default  reduce using rule 78 (boolean_expr)


State 196

   79 boolean_expr: expr EQ expr boolean_expr2 .

    $default  reduce using rule 79 (boolean_expr)


State 197

   83 boolean_expr: expr AND expr boolean_expr2 .

    $default  reduce using rule 83 (boolean_expr)


State 198

   84 boolean_expr: expr OR expr boolean_expr2 .

    $default  reduce using rule 84 (boolean_expr)


State 199

   44 conditional_state: IF boolean_expr THEN state ELSE . state END IF

    '('     shift, and go to state 39
    SUB     shift, and go to state 40
    NOT     shift, and go to state 41
    BEG     shift, and go to state 19
    FALSE   shift, and go to state 42
    FOR     shift, and go to state 75
    IF      shift, and go to state 76
    PRINT   shift, and go to state 77
    READ    shift, and go to state 78
    TRUE    shift, and go to state 43
    WHILE   shift, and go to state 79
    OCT     shift, and go to state 44
    ID      shift, and go to state 80
    INT     shift, and go to state 46
    FLOAT   shift, and go to state 47
    SCI     shift, and go to state 48
    RETURN  shift, and go to state 81

    $default  reduce using rule 32 (state)

    state              go to state 213
    func_invocation    go to state 83
    compound_state     go to state 84
    simple_state       go to state 85
    conditional_state  go to state 86
    while_state        go to state 87
    for_state          go to state 88
    return_state       go to state 89
    num                go to state 51
    expr               go to state 90


State 200

   43 conditional_state: IF boolean_expr THEN state END . IF

    IF  shift, and go to state 214


State 201

   45 while_state: WHILE boolean_expr DO state END . DO

    DO  shift, and go to state 215


State 202

   33 func_invocation: ID '(' func ')' ';' .

    $default  reduce using rule 33 (func_invocation)


State 203

   23 func_d: ID '(' func ')' ':' scalar_type ';' compound_state END . ID

    ID  shift, and go to state 216


State 204

   46 for_state: FOR ID ASSIGN INT TO INT . DO state END DO

    DO  shift, and go to state 217


State 205

   64 expr: expr . control expr
   86 boolean_expr2: GT expr . boolean_expr2

    ADD  shift, and go to state 69
    SUB  shift, and go to state 70
    MUL  shift, and go to state 71
    DIV  shift, and go to state 72
    MOD  shift, and go to state 73
    GT   shift, and go to state 183
    GE   shift, and go to state 184
    NE   shift, and go to state 185
    LE   shift, and go to state 186
    LT   shift, and go to state 187
    EQ   shift, and go to state 188
    AND  shift, and go to state 189
    OR   shift, and go to state 190

    $default  reduce using rule 94 (boolean_expr2)

    control        go to state 74
    boolean_expr2  go to state 218


State 206

   64 expr: expr . control expr
   89 boolean_expr2: GE expr . boolean_expr2

    ADD  shift, and go to state 69
    SUB  shift, and go to state 70
    MUL  shift, and go to state 71
    DIV  shift, and go to state 72
    MOD  shift, and go to state 73
    GT   shift, and go to state 183
    GE   shift, and go to state 184
    NE   shift, and go to state 185
    LE   shift, and go to state 186
    LT   shift, and go to state 187
    EQ   shift, and go to state 188
    AND  shift, and go to state 189
    OR   shift, and go to state 190

    $default  reduce using rule 94 (boolean_expr2)

    control        go to state 74
    boolean_expr2  go to state 219


State 207

   64 expr: expr . control expr
   91 boolean_expr2: NE expr . boolean_expr2

    ADD  shift, and go to state 69
    SUB  shift, and go to state 70
    MUL  shift, and go to state 71
    DIV  shift, and go to state 72
    MOD  shift, and go to state 73
    GT   shift, and go to state 183
    GE   shift, and go to state 184
    NE   shift, and go to state 185
    LE   shift, and go to state 186
    LT   shift, and go to state 187
    EQ   shift, and go to state 188
    AND  shift, and go to state 189
    OR   shift, and go to state 190

    $default  reduce using rule 94 (boolean_expr2)

    control        go to state 74
    boolean_expr2  go to state 220


State 208

   64 expr: expr . control expr
   90 boolean_expr2: LE expr . boolean_expr2

    ADD  shift, and go to state 69
    SUB  shift, and go to state 70
    MUL  shift, and go to state 71
    DIV  shift, and go to state 72
    MOD  shift, and go to state 73
    GT   shift, and go to state 183
    GE   shift, and go to state 184
    NE   shift, and go to state 185
    LE   shift, and go to state 186
    LT   shift, and go to state 187
    EQ   shift, and go to state 188
    AND  shift, and go to state 189
    OR   shift, and go to state 190

    $default  reduce using rule 94 (boolean_expr2)

    control        go to state 74
    boolean_expr2  go to state 221


State 209

   64 expr: expr . control expr
   87 boolean_expr2: LT expr . boolean_expr2

    ADD  shift, and go to state 69
    SUB  shift, and go to state 70
    MUL  shift, and go to state 71
    DIV  shift, and go to state 72
    MOD  shift, and go to state 73
    GT   shift, and go to state 183
    GE   shift, and go to state 184
    NE   shift, and go to state 185
    LE   shift, and go to state 186
    LT   shift, and go to state 187
    EQ   shift, and go to state 188
    AND  shift, and go to state 189
    OR   shift, and go to state 190

    $default  reduce using rule 94 (boolean_expr2)

    control        go to state 74
    boolean_expr2  go to state 222


State 210

   64 expr: expr . control expr
   88 boolean_expr2: EQ expr . boolean_expr2

    ADD  shift, and go to state 69
    SUB  shift, and go to state 70
    MUL  shift, and go to state 71
    DIV  shift, and go to state 72
    MOD  shift, and go to state 73
    GT   shift, and go to state 183
    GE   shift, and go to state 184
    NE   shift, and go to state 185
    LE   shift, and go to state 186
    LT   shift, and go to state 187
    EQ   shift, and go to state 188
    AND  shift, and go to state 189
    OR   shift, and go to state 190

    $default  reduce using rule 94 (boolean_expr2)

    control        go to state 74
    boolean_expr2  go to state 223


State 211

   64 expr: expr . control expr
   92 boolean_expr2: AND expr . boolean_expr2

    ADD  shift, and go to state 69
    SUB  shift, and go to state 70
    MUL  shift, and go to state 71
    DIV  shift, and go to state 72
    MOD  shift, and go to state 73
    GT   shift, and go to state 183
    GE   shift, and go to state 184
    NE   shift, and go to state 185
    LE   shift, and go to state 186
    LT   shift, and go to state 187
    EQ   shift, and go to state 188
    AND  shift, and go to state 189
    OR   shift, and go to state 190

    $default  reduce using rule 94 (boolean_expr2)

    control        go to state 74
    boolean_expr2  go to state 224


State 212

   64 expr: expr . control expr
   93 boolean_expr2: OR expr . boolean_expr2

    ADD  shift, and go to state 69
    SUB  shift, and go to state 70
    MUL  shift, and go to state 71
    DIV  shift, and go to state 72
    MOD  shift, and go to state 73
    GT   shift, and go to state 183
    GE   shift, and go to state 184
    NE   shift, and go to state 185
    LE   shift, and go to state 186
    LT   shift, and go to state 187
    EQ   shift, and go to state 188
    AND  shift, and go to state 189
    OR   shift, and go to state 190

    $default  reduce using rule 94 (boolean_expr2)

    control        go to state 74
    boolean_expr2  go to state 225


State 213

   44 conditional_state: IF boolean_expr THEN state ELSE state . END IF

    END  shift, and go to state 226


State 214

   43 conditional_state: IF boolean_expr THEN state END IF .

    $default  reduce using rule 43 (conditional_state)


State 215

   45 while_state: WHILE boolean_expr DO state END DO .

    $default  reduce using rule 45 (while_state)


State 216

   23 func_d: ID '(' func ')' ':' scalar_type ';' compound_state END ID .

    $default  reduce using rule 23 (func_d)


State 217

   46 for_state: FOR ID ASSIGN INT TO INT DO . state END DO

    '('     shift, and go to state 39
    SUB     shift, and go to state 40
    NOT     shift, and go to state 41
    BEG     shift, and go to state 19
    FALSE   shift, and go to state 42
    FOR     shift, and go to state 75
    IF      shift, and go to state 76
    PRINT   shift, and go to state 77
    READ    shift, and go to state 78
    TRUE    shift, and go to state 43
    WHILE   shift, and go to state 79
    OCT     shift, and go to state 44
    ID      shift, and go to state 80
    INT     shift, and go to state 46
    FLOAT   shift, and go to state 47
    SCI     shift, and go to state 48
    RETURN  shift, and go to state 81

    $default  reduce using rule 32 (state)

    state              go to state 227
    func_invocation    go to state 83
    compound_state     go to state 84
    simple_state       go to state 85
    conditional_state  go to state 86
    while_state        go to state 87
    for_state          go to state 88
    return_state       go to state 89
    num                go to state 51
    expr               go to state 90


State 218

   86 boolean_expr2: GT expr boolean_expr2 .

    $default  reduce using rule 86 (boolean_expr2)


State 219

   89 boolean_expr2: GE expr boolean_expr2 .

    $default  reduce using rule 89 (boolean_expr2)


State 220

   91 boolean_expr2: NE expr boolean_expr2 .

    $default  reduce using rule 91 (boolean_expr2)


State 221

   90 boolean_expr2: LE expr boolean_expr2 .

    $default  reduce using rule 90 (boolean_expr2)


State 222

   87 boolean_expr2: LT expr boolean_expr2 .

    $default  reduce using rule 87 (boolean_expr2)


State 223

   88 boolean_expr2: EQ expr boolean_expr2 .

    $default  reduce using rule 88 (boolean_expr2)


State 224

   92 boolean_expr2: AND expr boolean_expr2 .

    $default  reduce using rule 92 (boolean_expr2)


State 225

   93 boolean_expr2: OR expr boolean_expr2 .

    $default  reduce using rule 93 (boolean_expr2)


State 226

   44 conditional_state: IF boolean_expr THEN state ELSE state END . IF

    IF  shift, and go to state 228


State 227

   46 for_state: FOR ID ASSIGN INT TO INT DO state . END DO

    END  shift, and go to state 229


State 228

   44 conditional_state: IF boolean_expr THEN state ELSE state END IF .

    $default  reduce using rule 44 (conditional_state)


State 229

   46 for_state: FOR ID ASSIGN INT TO INT DO state END . DO

    DO  shift, and go to state 230


State 230

   46 for_state: FOR ID ASSIGN INT TO INT DO state END DO .

    $default  reduce using rule 46 (for_state)
